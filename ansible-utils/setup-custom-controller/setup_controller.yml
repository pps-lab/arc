---
- name: Create AWS instance
  ansible.builtin.import_playbook: create_aws.yml

- name: Pause for setup
  hosts: localhost
  tasks:
    - name: Pause
      ansible.builtin.pause:
        seconds: 10

- name: Prepare Controller User
  vars_files:
    - "site2_vars.yml"
  hosts: "{{test_host_name}}"
  tasks:
    - name: Create Controller User
      block:
        - name: Ensure existence of "sudo2" group
          ansible.builtin.group:
            state: present
            name: "sudo2"
          become: yes
        
        - name: Configure sudo to allow sudo2 group sudo acces without password
          ansible.builtin.template:
            src: resources/nopasswdsudo2.j2
            dest: /etc/sudoers.d/nopasswdsudo2
            mode: 0440
          become: yes

        - name: Generate controller user
          ansible.builtin.user:
            state: present
            name: "{{controller_user}}"
            append: True # Append Groups
            groups:
              - sudo2
            shell: /bin/bash
          become: yes

        - name: Copy authorized_keys from normal user to controller user
          block:
            - name: Check if path exists
              ansible.builtin.file:
                state: directory
                path: "/home/{{controller_user}}/.ssh/"
                mode: 0700
                owner: "{{controller_user}}"
              become: yes

            - name: Copy auhorized_keys
              ansible.builtin.copy:
                src: "/home/ubuntu/.ssh/authorized_keys"
                dest: "/home/{{controller_user}}/.ssh/authorized_keys"
                remote_src: yes
              become: yes
            
            - name: Give the copied authorized_keys the correct permissions
              ansible.builtin.file:
                path: "/home/{{controller_user}}/.ssh/authorized_keys"
                mode: 0600
                owner: "{{controller_user}}"
              become: yes
          

- name: Prepare Controller for actual project
  vars_files:
    - "site2_vars.yml"
  remote_user: "{{controller_user}}"
  hosts: "{{test_host_name}}"
  tasks:
    - name: Assert if Login Info is given
      block:
        - name: Assert AWS Access key is set
          ansible.builtin.assert:
            that: my_aws_access_key is defined
            fail_msg: "AWS Access key is not defined"

        - name: Assert AWS Secret key is set
          ansible.builtin.assert:
            that: my_aws_secret_key is defined
            fail_msg: "AWS Secret key is not defined" 


    - name: Install pip for Key Generation Prerequisite installation
      ansible.builtin.apt:
        pkg:
          - python3-pip
        update_cache: yes
      become: yes
      

    - name: Install prerequisites for Key Generation
      ansible.builtin.pip:
        name:
          - boto3>=1.16.0
          - botocore>=1.19.0
          - stormssh

    - name: "Generate SSH Keys for the different services"
      block:
        - name: Generate SSH Key for AWS
          community.crypto.openssh_keypair:
            type: rsa
            size: 4096
            state: present
            path: "/home/{{controller_user}}/.ssh/{{controller_aws_key_name}}"
          register: aws_openssh_key_data
        
        - name: Install SSH Key for AWS automatically
          amazon.aws.ec2_key:
            aws_access_key: "{{my_aws_access_key}}"
            aws_secret_key: "{{my_aws_secret_key}}"
            region: eu-central-1
            name: "{{controller_aws_key_pair_name}}"
            key_material: "{{aws_openssh_key_data.public_key}}"
            force: yes
            state: present
          ignore_errors: yes
          register: automatic_aws_key_install_result




        - name: Prompt user to install key into AWS
          ansible.builtin.pause:
            prompt: "Please install the public key:\n------\n{{aws_openssh_key_data.public_key}}\n-------\n under the following key-pair name: \"{{controller_aws_key_pair_name}}\""
            echo: yes
          when: aws_openssh_key_data.changed and automatic_aws_key_install_result.failed == True
        
        - name: Generate Github SSH Keys
          community.crypto.openssh_keypair:
            type: rsa
            size: 4096
            state: present
            path: "/home/{{controller_user}}/.ssh/{{controller_github_key_name}}"
          register: github_openssh_key_data

        - name: Install Github SSH Key automatically
          community.general.github_key:
            name: "{{controller_github_keypair_name}}"
            pubkey: "{{github_openssh_key_data.public_key}}"
            token: "{{my_github_token}}"
            state: present
            force: yes
          register: automatic_github_key_install_result
          ignore_errors: yes

        - name: Prompt user to install key into Github
          ansible.builtin.pause:
            prompt: "Please install the public key:\n------\n{{github_openssh_key_data.public_key}}\n------\n under the following name: \"{{controller_github_keypair_name}}\". Please note this name is just a recommmendation, if the key is no longer needed later or needs to be replaced."
            echo: yes
          when: github_openssh_key_data.changed and automatic_github_key_install_result.failed == True
        
    - name: Install Project into controller
      block:
        - name: Remove auto-updater from ubuntu
          become: True
          ansible.builtin.apt:
            pkg:
              - unattended-upgrades
            state: absent
            update_cache: yes
        
        - name: Install prerequisites for MP-SPDZ
          become: True
          ansible.builtin.apt:
            pkg:
              - automake
              - build-essential
              - git
              - libboost-dev
              - libboost-thread-dev
              - libntl-dev
              - libsodium-dev
              - libssl-dev
              - libtool
              - m4 
              - python3
              - texinfo
              - yasm
            update_cache: yes
            state: present

        - name: Clone Project 
          ansible.builtin.git:
            repo: "{{target_repo}}" 
            dest: "{{git_repo_dest}}"
            accept_hostkey: yes
            ssh_opts: "-o StrictHostKeyChecking=no -i \"/home/{{controller_user}}/.ssh/{{controller_github_key_name}}\""
            force: no
          register: clone_project_results
          ignore_errors: yes

        - name: Remove modifications from the repo and try again
          when: (clone_project_results.msg is defined) and ('Local modifications exist' in clone_project_results.msg)
          block:
            - name: Reset doe-suite
              ansible.builtin.shell:
                cmd: "git apply -R ../doe-suite.patch"
                chdir: "{{git_repo_dest}}/doe-suite/"

            - name: Reset controller-patch
              ansible.builtin.shell:
                cmd: "git apply -R ./setup-controller.local.patch"
                chdir: "{{git_repo_dest}}"
              
            - name: Retry pulling git repository
              ansible.builtin.git:
                repo: "{{target_repo}}" 
                dest: "{{git_repo_dest}}"
                accept_hostkey: yes
                ssh_opts: "-o StrictHostKeyChecking=no -i \"/home/{{controller_user}}/.ssh/{{controller_github_key_name}}\""
                force: no

        
        - name: Setup poetry
          block:
            - name: Install packages for poetry
              ansible.builtin.apt:
                pkg:
                  - python3.9
                  - python3.9-venv
                update_cache: yes
              become: yes

            - name: Download get-pip.py
              ansible.builtin.get_url:
                url: https://bootstrap.pypa.io/get-pip.py
                dest: /tmp/get-pip.py
            
            - name: Install pip for python (via script)
              ansible.builtin.shell:
                cmd: python3.9 /tmp/get-pip.py
            
            - name: Downloar install-poetry.py
              ansible.builtin.get_url:
                url: https://install.python-poetry.org/install-poetry.py
                dest: /tmp/install-poetry.py
                
            - name: Install poetry with script install-poetry.py
              ansible.builtin.shell:
                cmd: python3.9 /tmp/install-poetry.py
            
            - name: make path to poetry available in variable
              set_fact:
                poetry_exec: "/home/{{controller_user}}/.local/bin/poetry"

            - name: Set config to create .venv folder in project directory
              ansible.builtin.shell:
                cmd: "{{poetry_exec}} config virtualenvs.in-project true"

        - name: Setup awscli
          block:
            - name: Install packages
              become: yes
              ansible.builtin.apt:
                pkg:
                  - zip
                update_cache: yes
            
            - name: Download awscli
              ansible.builtin.get_url:
                url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
                dest: /tmp/awscliv2.zip
            
            - name: Unpack awscli
              ansible.builtin.unarchive:
                src: /tmp/awscliv2.zip
                dest: /tmp
                remote_src: yes

            - name: Install awscli via shell
              become: yes
              ansible.builtin.shell:
                chdir: /tmp
                cmd: ./aws/install
                creates: /usr/local/bin/aws
            - name: Create .aws directory
              ansible.builtin.file:
                state: directory
                path: "/home/{{controller_user}}/.aws"
                mode: 0755
                owner: "{{controller_user}}"

            - name: Copy local Settings to remote controller
              ansible.builtin.copy:
                src: ~/.aws/config
                dest: ~/.aws/config
                mode: 0600
                owner: "{{controller_user}}"
            
            - name: Copy local credentials to remote controller
              ansible.builtin.copy:
                src: ~/.aws/credentials
                dest: ~/.aws/credentials
                mode: 0600
                owner: "{{controller_user}}"
        - name: Setup SSH stuff
          block:
            - name: Configure SSH Hosts for AWS
              community.general.ssh_config:
                state: present
                user: "{{controller_user}}"
                host: "ec2*"
                remote_user: "ubuntu"
                strict_host_key_checking: no
                forward_agent: yes
                identity_file: "~/.ssh/{{controller_aws_key_name}}"
            - name: Configure SSH Hosts for Github
              community.general.ssh_config:
                state: present
                user: "{{controller_user}}"
                host: "github.com"
                remote_user: "git"
                strict_host_key_checking: no
                forward_agent: no
                identity_file: "~/.ssh/{{controller_github_key_name}}"
            
        - name: Setup setup-env.local.sh for everything else
          block:
            - name: Copy setup-env.local.sh
              ansible.builtin.template:
                src: resources/setup-env.local.sh.j2
                dest: "{{git_repo_dest}}/setup-env.local.sh"
                mode: 0644
                owner: "{{controller_user}}"
            - name: Apply doe-suite patch
              ansible.builtin.shell:
                cmd: "git apply ../doe-suite.patch"
                chdir: "{{git_repo_dest}}/doe-suite"

            - name: template setup-controller.patch
              ansible.builtin.template:
                src: resources/setup-controller.patch.j2
                dest: "{{git_repo_dest}}/setup-controller.local.patch"

            - name: Applying setup-controoler.patch
              ansible.builtin.shell:
                cmd: "git apply ./setup-controller.local.patch"
                chdir: "{{git_repo_dest}}"
            
        - name: Setup Development Environment
          block:
            - name: Git clone vimrc
              ansible.builtin.git:
                repo: https://github.com/amix/vimrc
                dest: "/home/{{controller_user}}/.vim_runtime"
                accept_hostkey: yes
                depth: 1
            - name: Install vimrc
              ansible.builtin.shell:
                cmd: "sh /home/{{controller_user}}/.vim_runtime/install_awesome_vimrc.sh"
              
            - name: update poetry dependencies
              ansible.builtin.shell:
                cmd: poetry update
                chdir: "{{git_repo_dest}}/doe-suite/"
