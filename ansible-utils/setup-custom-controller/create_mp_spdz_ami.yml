---
- name: Install MP-SPDZ
  hosts: all
  vars_files:
    - "{{playbook_dir}}/site2_vars.yml"
  tasks:
    - name: "Remove autoupdater from ubuntu"
      become: True
      ansible.builtin.apt:
        pkg:
          - unattended-upgrades
        state: absent
        update_cache: yes

    - name: "Install prerequisites for MP-SPDZ"
      become: True
      ansible.builtin.apt:
        pkg:
          - automake
          - build-essential
          - git
          - libboost-dev
          - libboost-thread-dev
          - libntl-dev
          - libsodium-dev
          - libssl-dev
          - libtool
          - m4
          - python3
          - texinfo
          - yasm
        update_cache: yes
        state: present

    - name: "Check if MP-SPDZ is already cloned"
      ansible.builtin.stat:
        path: "{{git_repo_mpspdz_location}}/CONFIG"
      register: mp_spdz_res

    - name: "Clone MP-SPDZ via custom repo"
      ansible.builtin.git:
        repo: "{{target_repo}}"
        dest: "{{git_repo_dest}}"
        accept_hostkey: yes
        ssh_opts: "-o StrictHostKeyChecking=no"
      when: mp_spdz_res.stat.exists == False

    - name: "Skip \"Clone MP-SPDZ\""
      ansible.builtin.debug:
        msg: "MP-SPDZ already cloned, skipping"
      when: mp_spdz_res.stat.exists == True
    
    - name: "Check if MP-SPDZ libraries were compiled"
      ansible.builtin.stat:
        path: "{{git_repo_mpspdz_location}}/semi2k-party.x"
      register: have_compiled_res
    
    - name: "Copy CONFIG (modified) file into compile dir"
      ansible.builtin.copy:
        src: resources/CONFIG
        dest: "{{git_repo_mpspdz_location}}/CONFIG"
      when: have_compiled_res.stat.exists == False

    - name: "Create Player-SSL-Data/ folder"
      ansible.builtin.file:
        path: "{{git_repo_mpspdz_location}}/Player-SSL-Data"
        state: directory
    
    - name: "Create Player-Prep-Data/ folder"
      ansible.builtin.file:
        path: "{{git_repo_mpspdz_location}}/Player-Prep-Data"
        state: directory

    - name: "Compile MP-SPDZ first mpir to get all libraries"
      community.general.make:
        chdir: "{{git_repo_mpspdz_location}}"
        jobs: "{{make_job_nums}}"
        target: "tldr"
      when: have_compiled_res.stat.exists == False
      
    - name: "Compile MP-SPDZ fully"
      community.general.make:
        chdir: "{{git_repo_mpspdz_location}}"
        jobs: "{{make_job_nums}}"
        target: "all"
      when: have_compiled_res.stat.exists == False
    
    - name: "Create Player-Data Folder"
      ansible.builtin.file:
        path: "{{git_repo_mpspdz_location}}/Player-Data"
        state: directory
    - name: "Create Player-SSL-Data/ folder"
      ansible.builtin.file:
        path: "{{git_repo_mpspdz_location}}/Player-SSL-Data"
        state: directory
    
    - name: "Create Player-Prep-Data/ folder"
      ansible.builtin.file:
        path: "{{git_repo_mpspdz_location}}/Player-Prep-Data"
        state: directory
    
    - name: Generate SSL Certificates for 20 players
      ansible.builtin.shell:
        chdir: "{{git_repo_mpspdz_location}}"
        cmd: "{{git_repo_mpspdz_location}}/Scripts/setup-ssl.sh 20 Player-SSL-Data/"
        creates: "{{git_repo_mpspdz_location}}/Player-SSL-Data/P0.key"

    

- name: "Create the AMI"
  hosts: localhost
  gather_facts: no
  vars_files:
    - "{{playbook_dir}}/site2_vars.yml"
  tasks:
    - name: "Stop Server to facilitate AMI creation"
      amazon.aws.ec2_instance:
        profile: "{{aws_target_profile}}"
        instance_ids:
          - "{{hostvars['test-1']['my_host_instance_id']}}"
        state: stopped
        wait: yes

    - name: "Create the AMI"
      amazon.aws.ec2_ami:
        profile: "{{aws_target_profile}}"
        wait: no
        instance_id: "{{hostvars['test-1']['my_host_instance_id']}}"
        name: "{{aws_ami_name}}"

