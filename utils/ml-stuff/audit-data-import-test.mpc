# this trains a dense neural network on MNIST
# see https://github.com/csiro-mlai/mnist-mpc for data preparation

program.options_from_args()

n_thread_num = int(program.args[1])
print_ln("Do stuff")

training_samples = MultiArray([60000, 28, 28], sfix)
training_labels = MultiArray([60000, 10], sint)

test_samples = MultiArray([10000, 28, 28], sfix)
test_labels = MultiArray([10000,10], sint)

n_samples = 1000
prediction_samples = sfix.Tensor([n_samples, 28, 28])
prediction_labels = sint.Tensor([n_samples, 10])

print_ln("Loading data")

print_ln("Loading training_labels")
training_labels.input_from(0)
print_ln("Loading training_samples")
training_samples.input_from(0)
print_ln("Loading test_labes")
test_labels.input_from(0)
print_ln("Loading test_samples")
test_samples.input_from(0)
print_ln("Loading prediction_labels")
prediction_labels.input_from(0)
print_ln("Loading prediction_samples")
prediction_samples.input_from(0)
# test if extra
# test_extras = sint.get_input_from(0)

from Compiler import ml
tf = ml 

tf.set_n_threads(n_thread_num)

layers = [
    tf.keras.layers.Conv2D(20,5,1,'valid', activation='relu'),
    tf.keras.layers.MaxPooling2D(2),
    tf.keras.layers.Conv2D(50,5,1,'valid', activation='relu'),
    tf.keras.layers.MaxPooling2D(2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(500, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
]

#layers = [
#    tf.keras.layers.Flatten(),
#    tf.keras.layers.Dense(128, activation='relu'),
#    tf.keras.layers.Dense(128, activation='relu'),
#    tf.keras.layers.Dense(10,  activation='softmax')
#]

model = tf.keras.models.Sequential(layers)
optim = tf.keras.optimizers.SGD()

model.compile(optimizer=optim)
model.build(test_samples.sizes)

start = 0
for i,var in enumerate(model.trainable_variables):
    print_ln("Loading trainable_variable %s",i)
    var.input_from(0)

print_ln("Done with loading")

guesses = model.predict(test_samples)


@map_sum_opt(28, 10000, [sint])
def accuracy(i):
    correct = sint( ( tf.argmax(guesses[i].reveal()) )  == ( tf.argmax(test_labels[i].reveal()) ) )
    return correct

acc = accuracy().reveal()


# Print results
print_ln("-----RESULTS-----")
print_ln("%s = %s", "accuracy_1", acc)
print_ln("%s = %s", "accuracy_2", acc * cfix(0.0001))

