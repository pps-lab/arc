diff --git a/Compiler/ml.py b/Compiler/ml.py
index 02f0f04..5e7e072 100644
--- a/Compiler/ml.py
+++ b/Compiler/ml.py
@@ -339,9 +339,23 @@ class Output(NoVariableLayer):
         # def _(i):
         #     self.nabla_X[i] = self.nabla_X[i] * self.weights[i]
         if self.debug_output:
-            print_ln('sigmoid X %s', self.X.reveal_nested())
-            print_ln('sigmoid nabla %s', self.nabla_X.reveal_nested())
-            print_ln('batch %s', batch.reveal_nested())
+            #print_ln('sigmoid X %s', self.X.reveal_nested())
+            #print_ln('sigmoid nabla %s', self.nabla_X.reveal_nested())
+            #print_ln('batch %s', batch.reveal_nested())
+            print_ln("###DEBUG###")
+            print_ln("{ \"sigmoid_X\":")
+            self.X.print_reveal_nested()
+            print_ln(",")
+
+            print_ln("\"sigmoid_nabla\": ")
+            self.nabla_X.print_reveal_nested()
+            print_ln(",")
+
+            print_ln("\"batch\": ")
+            batch.print_reveal_nested()
+            print_ln(", \"type\": \"debug_output_output_class\"}")
+            print_ln("###ENDDEBUG###")
+
 
     def set_weights(self, weights):
         assert sfix.f == cfix.f
@@ -359,6 +373,9 @@ class Output(NoVariableLayer):
             Y = self.Y
         n_correct = MemValue(0)
         n_printed = MemValue(0)
+        if debug:
+            print_ln("###DEBUG###")
+            print_ln("{\"type\": \"reveal_correctness_output_class\", \"data\": [")
         @for_range_opt(n)
         def _(i):
             truth = Y[i].reveal()
@@ -371,8 +388,14 @@ class Output(NoVariableLayer):
             if debug:
                 to_print = (1 - correct) * (n_printed < 10)
                 n_printed.iadd(to_print)
-                print_ln_if(to_print, '%s: %s %s %s %s',
+                
+                print_ln_if(to_print, "{")
+                print_ln_if(to_print, '\"%s\": [%s, %s, %s, %s,]',
 	                    i, truth, guess, b, nabla)
+                print_ln_if(to_print,"},")
+        if debug:
+            print_ln("[]]}")
+            print_ln("###ENDDEBUG###") 
         return n_correct
 
 class MultiOutputBase(NoVariableLayer):
@@ -405,6 +428,10 @@ class MultiOutputBase(NoVariableLayer):
         assert n <= len(self.X)
         assert n <= len(Y)
         Y.address = MemValue.if_necessary(Y.address)
+        if debug:
+            print_ln("###DEBUG###")
+            print_ln("{\"type\": \"reveal_correctness_multioutput_class\", \"data\": [")
+
         @map_sum(None if debug else self.n_threads, None, n, 1, regint)
         def _(i):
             a = Y[i].reveal_list()
@@ -419,9 +446,15 @@ class MultiOutputBase(NoVariableLayer):
             if debug:
                 to_print = (1 - correct) * (n_printed < 10)
                 n_printed.iadd(to_print)
-                print_ln_if(to_print, '%s: %s %s %s %s %s %s',
+                
+                print_ln_if(to_print, "{")
+                print_ln_if(to_print, '\"%s\": [%s, %s, %s, %s, %s, %s]',
 	                    i, truth, guess, loss, b, exp, nabla)
+                print_ln_if(to_print, "},")
             return correct
+        if debug:
+            print_ln("[]]}")
+            print_ln("###ENDDEBUG###")
         return _()
 
     @property
@@ -563,16 +596,23 @@ class MultiOutput(MultiOutputBase):
 
     def maybe_debug_backward(self, batch):
         if self.debug:
+            print_ln("###DEBUG###")
+            print_ln("{\"type\": \"maybe_debug_backwards_multioutput_class\", \"data\": [")
             @for_range(len(batch))
             def _(i):
                 check = 0
                 for j in range(self.X.sizes[1]):
                     to_check = self.nabla_X[i][j].reveal()
                     check += (to_check > len(batch)) + (to_check < -len(batch))
-                print_ln_if(check, 'X %s', self.X[i].reveal_nested())
-                print_ln_if(check, 'exp %s', self.exp[i].reveal_nested())
-                print_ln_if(check, 'nabla X %s',
+                print_ln_if(check, "{")
+                print_ln_if(check, '\"X\": %s,', self.X[i].reveal_nested())
+                print_ln_if(check, '\"exp\": %s,', self.exp[i].reveal_nested())
+                print_ln_if(check, '\"nabla_X\": %s',
                             self.nabla_X[i].reveal_nested())
+                print_ln_if(check, "},")
+            print_ln("[]]}")
+            print_ln("###ENDDEBUG###")
+
 
     def get_extra_debugging(self, i):
         if self.approx:
@@ -659,11 +699,17 @@ class DenseBase(Layer):
         progress('nabla b')
 
         if self.debug_output:
-            print_ln('dense nabla Y %s', self.nabla_Y.reveal_nested())
-            print_ln('dense W %s', self.W.reveal_nested())
-            print_ln('dense nabla X %s', self.nabla_X.reveal_nested())
+            print_ln("###DEBUG###")
+            print_ln("{\"type\": \"debug_output_backwards_params_densebase\",")
+            print_ln('\"dense_nabla_Y\": %s,', self.nabla_Y.reveal_nested())
+            print_ln('\"dense_W\": %s,', self.W.reveal_nested())
+            print_ln('\"dense_nabla_X\": %s', self.nabla_X.reveal_nested())
+            print_ln("}")
+            print_ln("###ENDDEBUG###")
         if self.debug:
             limit = N * self.debug
+            print_ln("###DEBUG###")
+            print_ln("{\"type\": \"debug_backwards_params_densebase\", \"data\": [")
             @for_range_opt(self.d_in)
             def _(i):
                 @for_range_opt(self.d_out)
@@ -672,28 +718,36 @@ class DenseBase(Layer):
                     check = sum(to_check > limit) + sum(to_check < -limit)
                     @if_(check)
                     def _():
-                        print_ln('nabla W %s %s %s: %s', i, j, self.W.sizes, to_check)
-                        print_ln('Y %s', [f_schur_Y[k][0][j].reveal()
+                        print_ln("{")
+                        print_ln('\"nabla_W\": [%s, %s, %s, %s],', i, j, self.W.sizes, to_check)
+                        print_ln('\"Y\": %s,', [f_schur_Y[k][0][j].reveal()
                                           for k in range(N)])
-                        print_ln('X %s', [self.X[k][0][i].reveal()
+                        print_ln('\"X\": %s', [self.X[k][0][i].reveal()
                                           for k in range(N)])
+                        print_ln("},")
             @for_range_opt(self.d_out)
             def _(j):
                 to_check = self.nabla_b[j].reveal()
                 check = sum(to_check > limit) + sum(to_check < -limit)
                 @if_(check)
                 def _():
-                    print_ln('nabla b %s %s: %s', j, len(self.b), to_check)
-                    print_ln('Y %s', [f_schur_Y[k][0][j].reveal()
+                    print_ln("{")
+                    print_ln('\"nabla_b\": [%s, %s, %s],', j, len(self.b), to_check)
+                    print_ln('\"Y\": %s', [f_schur_Y[k][0][j].reveal()
                                       for k in range(N)])
+                    print_ln("},")
             @for_range_opt(len(batch))
             def _(i):
                 to_check = self.nabla_X[i].get_vector().reveal()
                 check = sum(to_check > limit) + sum(to_check < -limit)
                 @if_(check)
                 def _():
-                    print_ln('X %s %s', i, self.X[i].reveal_nested())
-                    print_ln('Y %s %s', i, f_schur_Y[i].reveal_nested())
+                    print_ln("{")
+                    print_ln('\"X\": [%s, %s],', i, self.X[i].reveal_nested())
+                    print_ln('\"Y\": [%s, %s]', i, f_schur_Y[i].reveal_nested())
+                    print_ln("},")
+            print_ln("[]]}")
+            print_ln("###ENDDEBUG###")
 
 class Dense(DenseBase):
     """ Fixed-point dense (matrix multiplication) layer.
@@ -794,12 +848,17 @@ class Dense(DenseBase):
         if self.activation_layer:
             self.activation_layer.forward(batch)
         if self.debug_output:
-            print_ln('dense X %s', self.X.reveal_nested())
-            print_ln('dense W %s', self.W.reveal_nested())
-            print_ln('dense b %s', self.b.reveal_nested())
-            print_ln('dense Y %s', self.Y.reveal_nested())
+            print_ln("###DEBUG###")
+            print_ln("{\"type\": \"debug_output_forward_dense\",")
+            print_ln('\"dense_X\": %s,', self.X.reveal_nested())
+            print_ln('\"dense_W\": %s,', self.W.reveal_nested())
+            print_ln('\"dense_b\": %s,', self.b.reveal_nested())
+            print_ln('\"dense_Y\": %s', self.Y.reveal_nested())
+            print_ln("}")
         if self.debug:
             limit = self.debug
+            print_ln("###DEBUG###")
+            print_ln("{\"type\": \"debug_forward_dense\", \"data\": [")
             @for_range_opt(len(batch))
             def _(i):
                 @for_range_opt(self.d_out)
@@ -808,10 +867,14 @@ class Dense(DenseBase):
                     check = to_check > limit
                     @if_(check)
                     def _():
-                        print_ln('dense Y %s %s %s %s', i, j, self.W.sizes, to_check)
-                        print_ln('X %s', self.X[i].reveal_nested())
-                        print_ln('W %s',
+                        print_ln("{")
+                        print_ln('\"dense_Y\": [%s, %s, %s, %s],', i, j, self.W.sizes, to_check)
+                        print_ln('\"X\": %s,', self.X[i].reveal_nested())
+                        print_ln('\"W\": %s',
                                  [self.W[k][j].reveal() for k in range(self.d_in)])
+                        print_ln("},")
+            print_ln("[]]}")
+            print_ln("###ENDDEBUG###")
 
     def backward(self, compute_nabla_X=True, batch=None):
         N = len(batch)
@@ -943,8 +1006,12 @@ class Dropout(NoVariableLayer):
             def _(i):
                 self.Y[i] = self.X[batch[i]]
         if self.debug_output:
-            print_ln('dropout X %s', self.X.reveal_nested())
-            print_ln('dropout Y %s', self.Y.reveal_nested())
+            print_ln("###DEBUG###")
+            print_ln("{ \"type\": \"debug_output_dropout\",")
+            print_ln(' \"dropout_X\": %s,', self.X.reveal_nested())
+            print_ln('\"dropout_Y\": %s', self.Y.reveal_nested())
+            print_ln("}")
+            print_ln("###ENDDEBUG###")
 
     def backward(self, compute_nabla_X=True, batch=None):
         if compute_nabla_X:
@@ -953,8 +1020,12 @@ class Dropout(NoVariableLayer):
                 self.nabla_X[batch[i]].assign_vector(
                     self.nabla_Y[i].get_vector() * self.B[i].get_vector())
         if self.debug_output:
-            print_ln('dropout nabla_Y %s', self.nabla_Y.reveal_nested())
-            print_ln('dropout nabla_X %s', self.nabla_X.reveal_nested())
+            print_ln("###DEBUG###")
+            print_ln("{\"type\": \"debug_output_backward_dropout\", ")
+            print_ln('\"dropout_nabla_Y\": %s,', self.nabla_Y.reveal_nested())
+            print_ln('\"dropout_nabla_X\": %s', self.nabla_X.reveal_nested())
+            print_ln("}")
+            print_ln("###ENDDEBUG###")
 
 class ElementWiseLayer(NoVariableLayer):
     def __init__(self, shape, inputs=None):
@@ -979,11 +1050,17 @@ class ElementWiseLayer(NoVariableLayer):
             self.Y.assign_part_vector(self.f_part(base, size), base)
 
         if self.debug_output:
+            print_ln("###DEBUG###")
+            print_ln("{ \"type\": \"debug_output_forward_elementwiselayer\", \"data\": [")
             name = self
             @for_range(len(batch))
             def _(i):
-                print_ln('%s X %s %s', name, i, self.X[i].reveal_nested())
-                print_ln('%s Y %s %s', name, i, self.Y[i].reveal_nested())
+                print_ln("{")
+                print_ln('\"%s_X_%s\": %s,', name, i, self.X[i].reveal_nested())
+                print_ln('\"%s_Y_%s\": %s', name, i, self.Y[i].reveal_nested())
+                print_ln("},")
+            print_ln("[]]}")
+            print_ln("###ENDDEBUG###")
 
     def backward(self, batch):
         f_prime_bit = MultiArray(self.X.sizes, self.prime_type)
@@ -1005,12 +1082,18 @@ class ElementWiseLayer(NoVariableLayer):
 
         if self.debug_output:
             name = self
+            print_ln("###DEBUG###")
+            print_ln("{ \"type\": \"debug_output_backwards_elementwiselayer\", \"data\": [ ")
             @for_range(len(batch))
             def _(i):
-                print_ln('%s X %s %s', name, i, self.X[i].reveal_nested())
-                print_ln('%s f_prime %s %s', name, i, f_prime_bit[i].reveal_nested())
-                print_ln('%s nabla Y %s %s', name, i, self.nabla_Y[i].reveal_nested())
-                print_ln('%s nabla X %s %s', name, i, self.nabla_X[i].reveal_nested())
+                print_ln("{")
+                print_ln('\"%s_X_%s\": %s,', name, i, self.X[i].reveal_nested())
+                print_ln('\"%s_f_prime_%s\": %s,', name, i, f_prime_bit[i].reveal_nested())
+                print_ln('\"%s_nabla_Y_%s\": %s,', name, i, self.nabla_Y[i].reveal_nested())
+                print_ln('\"%s_nabla_X_%s\": %s', name, i, self.nabla_X[i].reveal_nested())
+                print_ln("},")
+            print_ln("[]]}")
+            print_ln("###ENDDEBUG###")
 
 class Relu(ElementWiseLayer):
     """ Fixed-point ReLU layer.
@@ -1618,12 +1701,19 @@ class Conv2d(ConvBase):
                 res.store_in_mem(addresses)
             self.reduction(len(batch))
             if self.debug_output:
-                print_ln('%s weights %s', self, self.weights.reveal_nested())
-                print_ln('%s bias %s', self, self.bias.reveal_nested())
+                print_ln("###DEBUG###")
+                print_ln("{ \"type\": \"debug_output_use_conv2ds_forward_conv2d\", ")
+                print_ln('\"%s_weights\": %s,', self, self.weights.reveal_nested())
+                print_ln('\"%s_bias\": %s,', self, self.bias.reveal_nested())
+                print_ln("\"data\": [")
                 @for_range(len(batch))
                 def _(i):
-                    print_ln('%s X %s %s', self, i, self.X[batch[i]].reveal_nested())
-                    print_ln('%s Y %s %s', self, i, self.Y[i].reveal_nested())
+                    print_ln("{")
+                    print_ln('\"%s_X_%s\": %s,', self, i, self.X[batch[i]].reveal_nested())
+                    print_ln('\"%s_Y_%s\": %s', self, i, self.Y[i].reveal_nested())
+                    print_ln("}")
+                print_ln("[]]}")
+                print_ln("###ENDDEBUG###")
             return
         else:
             assert len(batch) == 1
@@ -1789,17 +1879,25 @@ class FixConv2d(Conv2d, FixBase):
                                 output[i][jj][kk].get_vector())
 
         if self.debug_output:
+            print_ln("###DEBUG###")
+            print_ln("{ \"type\": \"debug_output_backwards_fixconv2d\", \"data\": [")
             @for_range(len(batch))
             def _(i):
-                print_ln('%s X %s %s', self, i, list(self.X[i].reveal_nested()))
-                print_ln('%s nabla Y %s %s', self, i, list(self.nabla_Y[i].reveal_nested()))
+                print_ln("{")
+                print_ln('\"%s_X_%s\": %s,', self, i, list(self.X[i].reveal_nested()))
+                print_ln('\"%s_nabla_Y_%s\": %s,', self, i, list(self.nabla_Y[i].reveal_nested()))
                 if compute_nabla_X:
-                    print_ln('%s nabla X %s %s', self, i, self.nabla_X[batch[i]].reveal_nested())
-            print_ln('%s nabla weights %s', self,
+                    print_ln('\"%s_nabla_X_%s\": %s,', self, i, self.nabla_X[batch[i]].reveal_nested())
+                print_ln("\"dummy\": [] ")
+                print_ln("},")
+            print_ln("[]],")
+            print_ln('\"%s_nabla_weights\": %s,', self,
                      (self.nabla_weights.reveal_nested()))
-            print_ln('%s weights %s', self, (self.weights.reveal_nested()))
-            print_ln('%s nabla b %s', self, (self.nabla_bias.reveal_nested()))
-            print_ln('%s bias %s', self, (self.bias.reveal_nested()))
+            print_ln('\"%s_weights\": %s,', self, (self.weights.reveal_nested()))
+            print_ln('\"%s_nabla_b\": %s,', self, (self.nabla_bias.reveal_nested()))
+            print_ln('\"%s_bias\": %s', self, (self.bias.reveal_nested()))
+            print_ln("}")
+            print_ln("###ENDDEBUG###")
 
 class QuantDepthwiseConv2d(QuantConvBase, Conv2d):
     def n_summands(self):
diff --git a/debug/.gitignore b/debug/.gitignore
new file mode 100644
index 0000000..b694934
--- /dev/null
+++ b/debug/.gitignore
@@ -0,0 +1 @@
+.venv
\ No newline at end of file
diff --git a/debug/clean.sh b/debug/clean.sh
new file mode 100644
index 0000000..8794cba
--- /dev/null
+++ b/debug/clean.sh
@@ -0,0 +1,2 @@
+#!/bin/bash
+rm -rf ./debug/results/*.txt
\ No newline at end of file
diff --git a/debug/debug_reader.py b/debug/debug_reader.py
new file mode 100644
index 0000000..138016e
--- /dev/null
+++ b/debug/debug_reader.py
@@ -0,0 +1,31 @@
+import re
+import sys
+import mmap
+
+DEBUG_OUTPUT_PREFIX='debug-output'
+DEBUG_BEGIN_TOKEN='###DEBUG###\n'
+DEBUG_END_TOKEN='###ENDDEBUG###\n'
+
+class DebugReader:
+
+    def run(self):
+        with open(f'{DEBUG_OUTPUT_PREFIX}-P0-0','r') as f_obj:
+            self.parse_file(f_obj)
+    
+    def parse_file(self,f_obj):
+        curr_debug = False
+        curr_input = ''
+        counter = 0
+        for line in f_obj:
+            if line == DEBUG_BEGIN_TOKEN and not(curr_debug):
+                curr_debug = True
+            elif curr_debug and (line != DEBUG_END_TOKEN):
+                curr_input = curr_input + line
+            elif curr_debug and (line == DEBUG_END_TOKEN):
+                curr_debug = False
+                with open(f'./debug/results/debug-out-{counter}.txt','w') as out_obj:
+                    out_obj.write(curr_input)
+                    out_obj.flush()
+            
+
+    
diff --git a/debug/debug_runner.py b/debug/debug_runner.py
new file mode 100644
index 0000000..7edda4f
--- /dev/null
+++ b/debug/debug_runner.py
@@ -0,0 +1,71 @@
+import abc
+import subprocess
+import sys
+import debug_reader as dbr
+
+# It is expected to run this script from the mp-spdz workdir
+
+class Runner(abc.ABC):
+    @abc.abstractmethod
+    def params(self):
+        pass
+    
+    @abc.abstractmethod
+    def program(self):
+        pass
+
+    def run(self):
+        subprocess.run(
+            ' '.join([self.program()] + self.params()),
+            shell=True,
+            capture_output=False
+        )
+
+class CompilerRunner(Runner):
+    def __init__(self, script_name,args):
+        self.script_name = script_name
+        self.args = args
+
+    def program(self):
+        return './compile.py'
+
+    def params(self):
+        return ['-C','-D', '-R', '64', f'../scripts/{self.script_name}.mpc'] + self.args
+
+    
+
+class EmulatorRunner(Runner):
+    def __init__(self,script_name, args):
+        self.script_name = script_name
+        self.args = args
+    
+    def program(self):
+        return './emulate.x'
+    
+    def params(self):
+        return ['-OF', dbr.DEBUG_OUTPUT_PREFIX, '-'.join([f'{self.script_name}'] + self.args)]
+        
+
+def generate_debug_output(script_name,args):
+    # Run the compiler and the emulator
+    comp_run = CompilerRunner(script_name,args)
+    emul_run = EmulatorRunner(script_name,args)
+    comp_run.run()
+    emul_run.run()
+
+    capture_debug_output()
+
+def capture_debug_output():
+    debug_reader = dbr.DebugReader()
+    debug_reader.run()
+
+def dry_run():
+    print(sys.argv[1:])
+
+
+if __name__ == "__main__":
+    if sys.argv[1] == '--no-gen':
+        capture_debug_output()
+    else:
+        generate_debug_output(sys.argv[1],sys.argv[2:])
+
diff --git a/debug/results/debug-out-0.txt b/debug/results/debug-out-0.txt
new file mode 100644
index 0000000..c690bdf
--- /dev/null
+++ b/debug/results/debug-out-0.txt
@@ -0,0 +1 @@
+{test: 123}
