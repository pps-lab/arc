# Test if assign_vector is copy by value or copy by reference
import Compiler.types as ty


test1 = MultiArray([5,5,5],sint)
test2 = MultiArray(test1.sizes,test1.value_type)

for i in test1:
    for j in i:
        rand_vect = sint.get_random(size=j.length)
        j.assign_vector(rand_vect)

test2.assign(test1)

for i in test1:
    for j in i:
        rand_vect = sint.get_random(size=j.length)
        j.assign_vector(rand_vect)

# Test if both matricees are equal
sizes = test1.sizes
expected_sum = sizes[0] * sizes[1] * sizes[2]

correct_sum = MemValue(regint(0))

@for_range(sizes[0])
def _(i):
    @for_range(sizes[1])
    def _(j):
        @for_range(sizes[2])
        def _(k):
            result = test1[i][j][k].equal(test2[i][j][k])
            acc = correct_sum.read()
            result = acc + result
            correct_sum.write(result.reveal())

@if_e(correct_sum < expected_sum // 4)
def _():
    print_ln("MultiArrays absolutely unequal")
@else_
def _():
    print_ln("MultiArrays are somewhat equal")



