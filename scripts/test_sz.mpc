# this trains LeNet on CIFAR-10

program.options_from_args()

from Compiler import ml, library

from Compiler.script_utils import config
from Compiler.types import sfix, sint, Array


# USE TRUNC_PR ??

class SchwartzZippelConfig(config.BaseAuditModel):
    n_samples: int = 10 # -1 = all
    # n_samples: int = -1 # -1 = all
    n_threads: int = 1

cfg: SchwartzZippelConfig = config.from_program_args(program.args, SchwartzZippelConfig)

# inputs
inputs_x = Array(cfg.n_samples, sint)
for i in range(cfg.n_samples):
    inputs_x[i] = sint(4)


library.start_timer(timer_id=100)

rho = sint(5)
output_sum = inputs_x[0]

# main loop
@for_range_opt(1, cfg.n_samples)
def _(i):
    output_sum.update(output_sum + (inputs_x[i] * rho))
    rho.update(rho * rho)

library.stop_timer(timer_id=100)

print_ln("output_sum: %s", output_sum.reveal())