from Compiler.script_utils import output_utils

from Compiler.script_utils.data import data


from Compiler import ml
from Compiler import library

from Compiler.script_utils.audit import rand_smoothing

from Compiler.script_utils import config, timers, input_consistency

from Compiler.script_utils.consistency_cerebro import compute_commitment


class CerebroConfig(config.BaseAuditModel):

    pass

program.options_from_args()
cfg = config.from_program_args(program.args, CerebroConfig)

program.use_trunc_pr = cfg.trunc_pr
sfix.round_nearest = cfg.round_nearest
ml.set_n_threads(cfg.n_threads)

train_dataset, _, _ = data._load_dataset_args(cfg.dataset)
n_players = len(train_dataset)

library.start_timer(timer_id=timers.TIMER_OUTPUT_COMMIT)

objects = input_consistency.read_output_format_from_file()

input_x = sint(38329283)

for object in objects:
    len_items = object["length"]

    n_runs = len_items // cfg.cerebro_output_approx_factor

    print("Computing commitment for individual input with n_runs", n_runs)
    print_ln("Approximating %s with %s", len_items, n_runs)

    random_r = sint(384882923483823)

    library.start_timer(timer_id=timers.TIMER_OUTPUT_CONSISTENCY_CEREBRO_VARIABLE)

    # @for_range_opt_multithread(cfg.n_threads, n_runs)

    @for_range_opt(0, n_runs)
    def _(i):
        compute_commitment(input_x, random_r)
    library.stop_timer(timer_id=timers.TIMER_OUTPUT_CONSISTENCY_CEREBRO_VARIABLE)

library.stop_timer(timer_id=timers.TIMER_OUTPUT_COMMIT)

print_ln("Done computing commitments!")
