from Compiler.script_utils import output_utils

from Compiler.script_utils.data import data


from Compiler import ml
from Compiler import library

from Compiler.script_utils.audit import knn

from Compiler.script_utils import config

program.options_from_args()
program.use_trunc_pr = True
program.use_edabits = True



class AuditConfig(config.BaseAuditModel):
    K: int = 25 # knn K
    mod_zscore_threshold: float = 2.5
    batch_size: int = 128


cfg = config.from_program_args(program.args, AuditConfig)

ml.set_n_threads(cfg.n_threads)

input_loader = data.get_input_loader(dataset=cfg.dataset, debug=cfg.debug, emulate=cfg.emulate)


library.start_timer(timer_id=100)

result = knn.audit(input_loader, cfg, debug=cfg.debug)

library.stop_timer(timer_id=100)


for k, v in result.items():
    output_utils.output_value(name=k, value=v, repeat=False)
