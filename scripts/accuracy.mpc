from Compiler.script_utils import output_utils

from Compiler.script_utils.data import data
from Compiler.script_utils.data import AbstractInputLoader


from Compiler import ml
from Compiler import library

from Compiler.script_utils.audit import shap

from Compiler.script_utils import config, timers




class InferenceConfig(config.BaseAuditModel):
    n_samples: int = 256 # -1 = all

program.options_from_args()
cfg = config.from_program_args(program.args, InferenceConfig)

if not cfg.emulate:
    pass
    # program.use_trunc_pr = cfg.trunc_pr
    # program.use_edabits = True
    # program.use_split(4)

# program.use_edabit(False)
# program.use_dabit = False
# program.use_split(3)

# program.set_bit_length(32)

ml.set_n_threads(cfg.n_threads)

library.start_timer(timer_id=timers.TIMER_LOAD_DATA)
input_loader: AbstractInputLoader = data.get_inference_input_loader(dataset=cfg.dataset, audit_trigger_idx=cfg.audit_trigger_idx,
                                                                    batch_size=cfg.batch_size, debug=cfg.debug, emulate=cfg.emulate, consistency_check=cfg.consistency_check, n_target_test_samples=cfg.n_samples, sha3_approx_factor=cfg.sha3_approx_factor)
library.stop_timer(timer_id=timers.TIMER_LOAD_DATA)


library.start_timer(timer_id=timers.TIMER_INFERENCE)

# eval here
inf_samples, inf_labels = input_loader.test_dataset() # train dataset in case we dont have test dataset

inf_samples = inf_samples.get_part(0, cfg.n_samples)
inf_labels = inf_labels.get_part(0, cfg.n_samples)

model = input_loader.model()

print("Model summary")
model.summary()
# prediction_results = model.eval(inf_samples, batch_size=min(cfg.batch_size, cfg.n_samples))
n_correct, avg_loss = model.reveal_correctness(data=inf_samples, truth=inf_labels, batch_size=min(input_loader.batch_size(), cfg.n_samples), running=True)
print_ln("  n_correct=%s  n_samples=%s  avg_loss=%s", n_correct, len(inf_samples), avg_loss)

library.stop_timer(timer_id=timers.TIMER_INFERENCE)

# if cfg.debug:
#     print_ln(prediction_results.reveal(), inf_labels.reveal())
