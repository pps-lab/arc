# this trains LeNet on CIFAR-10

program.options_from_args()

from Compiler import ml, library

try:
    ml.set_n_threads(int(program.args[2]))
except:
    pass

library.start_timer(timer_id=110)

import torchvision, numpy
data = []
for train in True, False:
    ds = torchvision.datasets.CIFAR10(root='/tmp', train=train, download=True)
    # normalize to [-1,1] before input
    samples = sfix.input_tensor_via(0, ds.data / 255 * 2 - 1, binary=True)
    labels = sint.input_tensor_via(0, ds.targets, binary=True, one_hot=True)
    data += [(labels, samples)]

(training_labels, training_samples), (test_labels, test_samples) = data

library.stop_timer(timer_id=110)

library.start_timer(timer_id=111)

import torch
import torch.nn as nn

from Compiler.script_utils.model.AlexNet import AlexNet

net = AlexNet().sequential

# test network
ds = torchvision.datasets.CIFAR10(
    root='/tmp', transform=torchvision.transforms.ToTensor())
inputs = next(iter(torch.utils.data.DataLoader(ds)))[0]
print(inputs.shape)
outputs = net(inputs)

layers = ml.layers_from_torch(net, training_samples.shape, 128)

library.stop_timer(timer_id=111)

library.start_timer(timer_id=112)

optimizer = ml.SGD(layers)
optimizer.fit(
    training_samples,
    training_labels,
    epochs=int(program.args[1]),
    batch_size=128,
    validation_data=(test_samples, test_labels),
    program=program
)
library.stop_timer(timer_id=112)