# this trains LeNet on CIFAR-10

program.options_from_args()

from Compiler import ml, library

from Compiler.script_utils import config


# USE TRUNC_PR ??

class TrainingConfig(config.BaseAuditModel):
    # n_samples: int = -1 # -1 = all
    n_samples: int = -1 # -1 = all
    n_threads: int = 1

cfg: TrainingConfig = config.from_program_args(program.args, TrainingConfig)

if not cfg.emulate:
    program.use_trunc_pr = cfg.trunc_pr
    # program.use_edabits = True

try:
    ml.set_n_threads(int(cfg.n_threads))
except:
    pass

library.start_timer(timer_id=110)

import torchvision, numpy
# data = []
# for train in True, False:
#     ds = torchvision.datasets.CIFAR10(root='/tmp', train=train, download=True)
#     # normalize to [-1,1] before input
#     samples = sfix.input_tensor_via(0, ds.data / 255 * 2 - 1, binary=True)
#     # print(ds.targets)
#     labels = sint.input_tensor_via(0, ds.targets, binary=True, one_hot=True)
#     # print(labels)
#     data += [(labels, samples)]
#
# (training_labels, training_samples), (test_labels, test_samples) = data

ds = torchvision.datasets.CIFAR10(root='/tmp', train=False, download=True)

if cfg.n_samples == -1:
    (test_labels, test_samples) = sint.input_tensor_via(0, ds.targets, binary=True, one_hot=True), \
        sfix.input_tensor_via(0, ds.data / 255 * 2 - 1, binary=True)
else:
    (test_labels, test_samples) = sint.input_tensor_via(0, ds.targets[0:cfg.n_samples], binary=True, one_hot=True), \
        sfix.input_tensor_via(0, ds.data[0:cfg.n_samples] / 255 * 2 - 1, binary=True)
library.stop_timer(timer_id=110)

library.start_timer(timer_id=111)

import torch
from Compiler.script_utils.model.AlexNet import AlexNet

net = AlexNet().sequential

# test network
# ds = torchvision.datasets.CIFAR10(
#     root='/tmp', transform=torchvision.transforms.ToTensor())
# inputs = next(iter(torch.utils.data.DataLoader(ds)))[0]
# print(inputs.shape)
# outputs = net(inputs)

layers = ml.layers_from_torch(net, test_samples.shape, 128)

library.stop_timer(timer_id=111)

library.start_timer(timer_id=112)

optimizer = ml.SGD(layers)
optimizer.reset()

library.stop_timer(timer_id=112)
library.start_timer(timer_id=113)

guess = optimizer.reveal_correctness(test_samples, test_labels)

# optimizer = ml.SGD(layers)
# optimizer.fit(
#     training_samples,
#     training_labels,
#     epochs=int(cfg.epochs),
#     batch_size=128,
#     validation_data=(test_samples, test_labels),
#     program=program
# )

library.stop_timer(timer_id=113)

library.start_timer(timer_id=114)

# TODO: Compare timing
guess = optimizer.eval(test_samples, batch_size=128)

# optimizer = ml.SGD(layers)
# optimizer.fit(
#     training_samples,
#     training_labels,
#     epochs=int(cfg.epochs),
#     batch_size=128,
#     validation_data=(test_samples, test_labels),
#     program=program
# )

library.stop_timer(timer_id=114)

# predict?
# optimizer = ml.SGD(layers)
# n_correct, loss = optimizer.reveal_correctness(test_samples, test_labels, 128, running=True)
#
# model.predict(test_samples)
