from Compiler.script_utils import output_utils

from Compiler.script_utils.data import data


from Compiler import ml
from Compiler import library


from Compiler.script_utils import config, timers




class AuditConfig(config.BaseAuditModel):
    K: int = 25 # knn K
    mod_zscore_threshold: float = 2.5

program.options_from_args()
cfg = config.from_program_args(program.args, AuditConfig)

if not cfg.emulate:
    program.use_trunc_pr = cfg.trunc_pr
    # program.use_edabits = True
    # program.use_split(4)

ml.set_n_threads(cfg.n_threads)

library.start_timer(timer_id=timers.TIMER_AUDIT)
input_loader = data.get_input_loader(dataset=cfg.dataset, audit_trigger_idx=cfg.audit_trigger_idx, batch_size=cfg.batch_size, debug=cfg.debug, emulate=cfg.emulate, consistency_check=cfg.consistency_check, sha3_approx_factor=cfg.sha3_approx_factor)
library.stop_timer(timer_id=timers.TIMER_AUDIT)


library.start_timer(timer_id=timers.TIMER_AUDIT)

# result, debug_output = knnshapley.audit(input_loader, cfg, debug=cfg.debug)

# traceback algorithm
# ...

library.stop_timer(timer_id=timers.TIMER_AUDIT)

print("Done with audit, outputting results")

# REVEALING MIGHT TAKE A LOT OF COMPILATION TIME / OVERHEAD
for k, v in result.items():
    output_utils.output_value(name=k, value=v)

for k, v in debug_output.items():
    output_utils.output_value_debug(name=k, value=v, repeat=False)
