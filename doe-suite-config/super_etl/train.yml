---


$SUITE_ID$:

  #Nicolas: 1702396587

#  train_3pc_

#  1705520109 train_3pc_1705935295


  train_3pc: 1705937567

  # train_3pc_wan_1705935360
#  train_3pc_wan_1705530372 train_3pc_wan_
  train_3pc_wan: 1705939961
$ETL$:
#  raw:
#    experiments:
#      train_3pc: "*"
#    extractors:
#      $INCLUDE_STEPS$: [{config: train, pipeline: compare_relatedwork}]
#    transformers: []
#    loaders:
#      PickleSummaryLoader: {}



#  train_3pc:
#    experiments:
#      train_3pc: "*"
#      train_3pc_wan: "*"
#    extractors:
#      MpSpdzResultExtractor: { }
#      MpSpdzStderrExtractor:
#        file_regex:
#          - ^stderr\.log$
#          - ^cerebro_input_stderr\.log$
#          - ^cerebro_output_stderr\.log$
#      ConsistencyExtractor: { }
#      IgnoreExtractor:
#        file_regex:
#          - ^stdout\.log$
#          - ^cerebro_input_stdout\.log$
#          - ^cerebro_output_stdout\.log$
#    transformers:
#      - df.replace: { to_replace: "^adult_[a-zA-Z0-9]*", value: "adult", regex: True }
#      - df.replace: { to_replace: "^mnist_full_[a-zA-Z0-9]*", value: "mnist_full", regex: True }
#      - df.replace: { to_replace: "^cifar_alexnet_[a-zA-Z0-9]*", value: "cifar_alexnet", regex: True }
#
#      - name: ComputationMultiplierTransformer
#      - name: CerebroMultiplierTransformer
#      - name: Sha3MultiplierTransformer
#
#      # need: blowup train size
#      # need: cerebro input/output transformer
#      - name: StatTransformer
#        groupby_columns: [ suite_name, exp_name, run, host_idx, 'mpc.script_name', 'mpc.domain', 'mpc.script_args.dataset', 'mpc_type', 'network_type', 'consistency_args.type' ]
#        stats:
#          mpc_time_s: ["spdz_timer_99", "spdz_timer_1102"]
#
#  # TODO: SPDZ TIMER 97!!!
#
#          auditing_overhead_s: ["consistency_convert_shares_share_switch_output_mus",
#                                "consistency_poly_commit_commit_mus",
#                                "consistency_poly_commit_sign_mus",
#                                "consistency_poly_commit_sign_sk_mus",
#                                "consistency_convert_shares_share_switch_input_mus",
#                                "consistency_poly_eval_poly_eval_mus",
#                                "consistency_prove_verify_Prove Verify_mus",
#
#                                "spdz_timer_98",
#
#                                "cerebro_input_spdz_timer_95",
#                                "consistency_cerebro_verify_Exponentiate_mus",
#
##                                "cerebro_output_spdz_timer_95", # output timers
##                                "spdz_timer_97", # output timers
#          ]
#
#          auditing_overhead_bytes: ["consistency_convert_shares_share_switch_output_global_bytes",
#                                      "consistency_poly_commit_commit_global_bytes",
#                                      "consistency_poly_commit_sign_global_bytes",
#                                      "consistency_poly_commit_sign_sk_global_bytes",
#                                      "consistency_convert_shares_share_switch_input_global_bytes",
#                                      "consistency_poly_eval_poly_eval_global_bytes",
#                                      "consistency_prove_verify_global_bytes",
#
#                                    "spdz_timer_bw_98", # this is not in total!!
#
#                                      "cerebro_input_spdz_global_data_sent", # TODO: Also convert these
#                                      "cerebro_output_spdz_global_data_sent"
#
#
#          ]
#
#          global_data_sent_mb: [ "spdz_global_data_sent" ]
#
#          n_rounds: [ "spdz_player_round_number" ]
#
#          share_convert_time_s: [ "consistency_convert_shares_share_switch_output_mus" ]
#          share_convert_global_bytes: [ "consistency_convert_shares_share_switch_output_global_bytes" ]
#
#          poly_commit_time_s: [ "consistency_poly_commit_commit_mus" ]
#          poly_commit_global_bytes: [ "consistency_poly_commit_commit_global_bytes" ]
#
#          sign_time_s: [ "consistency_poly_commit_sign_mus" ]
#          sign_global_bytes: [ "consistency_poly_commit_sign_global_bytes" ]
#
#          sign_sk_time_s: [ "consistency_poly_commit_sign_sk_mus" ]
#          sign_sk_global_bytes: [ "consistency_poly_commit_sign_sk_global_bytes" ]
#      #- df.replace: {to_replace: "sy", value: {exp_name: "mal"}} # rename sy experiment to mal
#      #- df.replace: {to_replace: "field_256", value: "custom_256"}
#
#
#    loaders:
#      PickleSummaryLoader: {}
#      CsvSummaryLoader: { }
#      BarPlotLoader:
#
#        cols_values_filter:
#          mpc.script_name: ['training']
#          suite_name: [ train_3pc, train_3pc_wan ]
#          'consistency_args.type': [ 'pc', 'cerebro', 'sha3' ]
#
#          network_type: ['lan', 'wan']
#          host_idx: [0] # only plot one party
#          mpc_type: [ 'sh', 'mal' ]
#          'mpc.script_args.dataset': [adult, mnist_full, cifar_alexnet] #[ "adult_3p", "mnist_full_3party", "cifar_alexnet_3party", "adult_2p", "mnist_full_2party", "cifar_alexnet_2party"] # "ember_3party"
#          'mpc.domain': ['ring'] #[ 'ring_split',  'custom_256'] # 'field_128'
#
#
#        plot_cols: [ 'suite_name', 'mpc.script_name', 'host_idx', 'mpc.domain', 'network_type', 'consistency_args.type']
#
#        group_cols: [ mpc.script_args.dataset ]
#
#        bar_cols: [ 'mpc_type' ]
#
#
#        colors:  ['#D5E1A3', '#C7B786', '#D5E1A3', '#C7B786'] #, (166 / 255.0, 184 / 255.0, 216 / 255.0), (76 / 255.0, 114 / 255.0, 176 / 255.0)] #, "#5dfc00", "#5dfcf7", "#fd9ef7"]
#
#
#        color_stack_rgba: [1.0, 0.6]
#
#        legend:
#          format: "{} {}"
#          cols: ["mpc_type", "$bar_part_col$"]
#
#        title:
#          format: "3PC - {}"
#          plot_cols: ['mpc.domain']
#
#        labels:
#          mpc_time_s: ""
#          global_data_sent_mb: ""
#          auditing_overhead_s: "(Overhead)"
#          auditing_overhead_bytes: "(Overhead)"
#          n_rounds: ""
#
#          ring: "Ring"
#          ring_split: "Ring"
#          custom_256: "Field"
#
#          adult: "Adult"
#          mnist_full: "MNIST"
#          cifar_alexnet: "Cifar10"
#
#
#          sh: "SH"
#          mal: "MAL"
#
#        show_debug_info: False
#
#        metrics:
#          time:
#            bar_part_cols: [ mpc_time_s, auditing_overhead_s]
#            y_unit_divider: 60.0 # switch to mins from secs
#            y_label: "Time [min]"
#            legend_order: [0, 2, 1, 3]
#            legend_ncol: 4
#
#          rounds:
#            bar_part_cols: [n_rounds]
#            y_label: "Rounds"
#
#          bandwidth:
#            bar_part_cols: [global_data_sent_mb, auditing_overhead_bytes]
#            y_label: "Bandwidth [MB]"
#            y_unit_multiplicator:  1.0e-6 # transform to MB
#            log_y: True
#            legend_order: [0, 2, 1, 3]
#            legend_ncol: 4

  compare_relatedwork:
    experiments:
      train_3pc: "*"
      train_3pc_wan: "*"
    extractors:
      MpSpdzResultExtractor: { }
      MpSpdzStderrExtractor:
        file_regex:
          - ^stderr\.log$
          - ^cerebro_input_stderr\.log$
          - ^cerebro_output_stderr\.log$
          - ^sha3_input_stderr\.log$
          - ^sha3_output_stderr\.log$
      ConsistencyExtractor: { }
      IgnoreExtractor:
        file_regex:
          - ^stdout\.log$
          - ^cerebro_input_stdout\.log$
          - ^cerebro_output_stdout\.log$
          - ^sha3_input_stdout\.log$
          - ^sha3_output_stdout\.log$
    transformers:
      - df.replace: { to_replace: "^adult_[a-zA-Z0-9]*", value: "adult", regex: True }
      - df.replace: { to_replace: "^mnist_full_[a-zA-Z0-9]*", value: "mnist_full", regex: True }
      - df.replace: { to_replace: "^cifar_alexnet_[a-zA-Z0-9]*", value: "cifar_alexnet", regex: True }

      # use pandas function to set mpc_type to sh if protocol=semi_honest_3
      - name: MPCTypeFixTransformer

      - name: TimerBandwidthAggregator
      - name: ComputationMultiplierTransformer
      - name: CerebroMultiplierTransformer
      - name: Sha3MultiplierTransformer

      # need: blowup train size
      # need: cerebro input/output transformer
      - name: StatTransformer
        groupby_columns: [ suite_name, exp_name, run, host_idx, 'mpc.script_name', 'mpc.domain', 'mpc.script_args.dataset', 'mpc_type', 'network_type', 'consistency_args.type' ]
        stats:
          mpc_time_s: [ "spdz_timer_99", "spdz_timer_1102" ]

          auditing_overhead_s: [ "consistency_convert_shares_share_switch_output_mus",
                                 "consistency_poly_commit_commit_mus",
                                 "consistency_poly_commit_sign_mus",
                                 "consistency_poly_commit_sign_sk_mus",
                                 "consistency_convert_shares_share_switch_input_mus",
                                 "consistency_poly_eval_poly_eval_mus",
                                 "consistency_prove_verify_Prove Verify_mus",

                                 "spdz_timer_98",
                                 "spdz_timer_97", # output timers

                                 "cerebro_input_spdz_timer_95",
                                 "cerebro_output_spdz_timer_95", # output timers
                                 "consistency_cerebro_verify_Exponentiate_mus",

                                 "sha3_input_spdz_timer_98",
                                 "sha3_output_spdz_timer_97",
          ]

          auditing_overhead_bytes: [ "consistency_convert_shares_share_switch_output_global_bytes",
                                     "consistency_poly_commit_commit_global_bytes",
                                     "consistency_poly_commit_sign_global_bytes",
                                     "consistency_poly_commit_sign_sk_global_bytes",
                                     "consistency_convert_shares_share_switch_input_global_bytes",
                                     "consistency_poly_eval_poly_eval_global_bytes",
                                     "consistency_prove_verify_global_bytes",

                                     "spdz_timer_bw_98",
                                     "spdz_timer_bw_97",

                                     "cerebro_input_spdz_timer_bw_95", # output timers
                                     "cerebro_output_spdz_timer_bw_95", # output timers

                                     "sha3_input_spdz_timer_bw_98",
                                     "sha3_output_spdz_timer_bw_97"
          ]

          global_data_sent_bytes: [ "spdz_timer_bw_99", "spdz_timer_bw_1102" ]

          n_rounds: [ "spdz_player_round_number" ]

          share_convert_time_s: [ "consistency_convert_shares_share_switch_output_mus" ]
          share_convert_global_bytes: [ "consistency_convert_shares_share_switch_output_global_bytes" ]

          poly_commit_time_s: [ "consistency_poly_commit_commit_mus" ]
          poly_commit_global_bytes: [ "consistency_poly_commit_commit_global_bytes" ]

          sign_time_s: [ "consistency_poly_commit_sign_mus" ]
          sign_global_bytes: [ "consistency_poly_commit_sign_global_bytes" ]

          sign_sk_time_s: [ "consistency_poly_commit_sign_sk_mus" ]
          sign_sk_global_bytes: [ "consistency_poly_commit_sign_sk_global_bytes" ]
      #- df.replace: {to_replace: "sy", value: {exp_name: "mal"}} # rename sy experiment to mal
      #- df.replace: {to_replace: "field_256", value: "custom_256"}


    loaders:
      PickleSummaryLoader: { }
      CsvSummaryLoader: { }
      BarPlotLoader:

        cols_values_filter:
          mpc.script_name: [ 'training' ]
          suite_name: [ train_3pc, train_3pc_wan ]
          'consistency_args.type': [ 'pc', 'cerebro', 'sha3s' ]

          network_type: [ 'lan', 'wan' ]
          host_idx: [ 0 ] # only plot one party
          mpc_type: [ 'sh', 'mal' ]
          'mpc.script_args.dataset': [ adult, mnist_full, cifar_alexnet ] #[ "adult_3p", "mnist_full_3party", "cifar_alexnet_3party", "adult_2p", "mnist_full_2party", "cifar_alexnet_2party"] # "ember_3party"
          'mpc.domain': [ 'ring' ] #[ 'ring_split',  'custom_256'] # 'field_128'


        plot_cols: [ 'suite_name', 'mpc.script_name', 'host_idx', 'mpc.domain', 'network_type', 'mpc.script_args.dataset' ]

        group_cols: [  'consistency_args.type' ]

        bar_cols: [ 'mpc_type' ]


        colors: [ '#D5E1A3', '#C7B786', '#D5E1A3', '#C7B786' ] #, (166 / 255.0, 184 / 255.0, 216 / 255.0), (76 / 255.0, 114 / 255.0, 176 / 255.0)] #, "#5dfc00", "#5dfcf7", "#fd9ef7"]


        color_stack_rgba: [ 1.0, 0.6 ]
        show_debug_info: True

        legend:
          format: "{} {}"
          cols: [ "mpc_type", "$bar_part_col$" ]

        title:
          format: "3PC - {}"
          plot_cols: [ 'mpc.script_args.dataset' ]

        labels:
          mpc_time_s: ""
          global_data_sent_mb: ""
          auditing_overhead_s: "(Overhead)"
          auditing_overhead_bytes: "(Overhead)"
          n_rounds: ""

          ring: "Ring"
          ring_split: "Ring"
          custom_256: "Field"

          adult: "Adult"
          mnist_full: "MNIST"
          cifar_alexnet: "Cifar10"

          pc: "Ours"
          cerebro: "CC"
          sha3: "SHA3"
          sha3s: "SHA3"


          sh: "SH"
          mal: "MAL"

        metrics:
          time:
            bar_part_cols: [ mpc_time_s, auditing_overhead_s ]
            y_unit_divider: 60.0 # switch to mins from secs
            y_label: "Time [min]"
            legend_order: [ 0, 2, 1, 3 ]
            legend_ncol: 4
            log_y: True

          rounds:
            bar_part_cols: [ n_rounds ]
            y_label: "Rounds"

          bandwidth:
            bar_part_cols: [ global_data_sent_bytes, auditing_overhead_bytes ]
            y_label: "Bandwidth [MB]"
            y_unit_multiplicator: 1.0e-6 # transform to MB
            log_y: True
            legend_order: [ 0, 2, 1, 3 ]
            legend_ncol: 4
