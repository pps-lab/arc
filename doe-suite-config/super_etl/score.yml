---

# TODO [nku] could add default skeleton for super etl

# Checkout the example from the demo_project: demo_project/doe-suite-config/super_etl/demo_plots.yml

$SUITE_ID$:

#  audit_score_1715022414
#  audit_score_
  audit_score:
    audit_score_3pc: 1715244038 #1715183578 #1715068629 #1714741168

$ETL$:
  raw:
    experiments:
      audit_score: "*"
    extractors:
      $INCLUDE_STEPS$: [ { config: score, pipeline: compare_specific } ]
    transformers: [ ]
    loaders:
      PickleSummaryLoader: { }
      CsvSummaryLoader: { }

  compare_specific:
    experiments:
      audit_score: "*"

    extractors:
      #      MpSpdzResultExtractor: { } # this parses results from the audit
      MpSpdzStderrExtractor:
        ignore_errors: yes
        file_regex:
          - ^stderr\.log$
          - ^cerebro_input_stderr\.log$
          - ^cerebro_output_stderr\.log$
          - ^sha3_input_stderr\.log$
          - ^sha3_output_stderr\.log$
      ConsistencyExtractor: { }
      IgnoreExtractor:
        file_regex:
          - ^stdout\.log$
          - ^cerebro_input_stdout\.log$
          - ^cerebro_output_stdout\.log$
          - ^result-P[0-9]+-[0-9]+\.txt$
          - ^sha3_input_stdout\.log$
          - ^sha3_output_stdout\.log$
    transformers:
      - df.replace: { to_replace: "^adult_[a-zA-Z0-9]*", value: "adult", regex: True }
      - df.replace: { to_replace: "^mnist_full_[a-zA-Z0-9]*", value: "mnist_full", regex: True }
      - df.replace: { to_replace: "^cifar_alexnet_[a-zA-Z0-9]*", value: "cifar_alexnet", regex: True }

      - name: TimerBandwidthAggregator
      - name: ComputationMultiplierTransformer
        timer_id_computation: 100

#      - name: CerebroSpecificMultiplierTransformer
#      - name: ComputationSpecificMultiplierTransformer
#        timer_name: consistency_convert_shares_share_switch_input
#      - name: ComputationSpecificMultiplierTransformer
#        timer_name: consistency_cerebro_verify_Exponentiate
#
#      - name: Sha3MultiplierTransformer

      - name: StatTransformer
        groupby_columns: [ suite_name, run, host_idx, exp_name, 'mpc.script_name', 'mpc_type', 'network_type', 'mpc.protocol_setup', 'mpc.domain', 'mpc.script_args.dataset', 'mpc.script_args.score_method' ]
        stats:
          total_time_s: [ "spdz_timer_100" ]
          inference_time_s: [ "spdz_timer_101" ]
          score_time_s: [ "spdz_timer_102", "spdz_timer_103" ]

          score_separate_time_s: [ "spdz_timer_102" ]
          sorting_time_s: [ "spdz_timer_103" ]
          pre_sorting_time_s: [ "spdz_timer_104" ]
          pre_l2_time_s: [ "spdz_timer_105" ]
          post_cosine_time_s: [ "spdz_timer_106" ]

          inference_bw_bytes: [ "spdz_timer_bw_101" ]
          score_bw_bytes: [ "spdz_timer_bw_102", "spdz_timer_bw_103" ]
#          sorting_bw_bytes: [  ]
          pre_sorting_bw_bytes: [ "spdz_timer_bw_104" ]
          global_data_sent_bytes: [ "spdz_timer_bw_100" ]

          n_rounds: [ "spdz_player_round_number" ]

    loaders:
      CsvSummaryLoader: { }
      BarPlotLoader:

        subplots:
          rows: [ "$metrics$" ]
          cols: [ 'mpc.script_args.dataset', "network_type" ]

          share_y: none

        cols_values_filter:
          mpc.script_name: [ 'audit_owner_score' ]
          'mpc.script_args.score_method': [ l2, cosine, cosine_presort_l2 ] #, ,

          mpc_type: [ 'sh', 'mal' ]

          host_idx: [ 0 ] # only plot one party
          'mpc.protocol_setup': [ 'semi_honest_3', 'sy-rep-ring-party' ] #
          'network_type': [ lan ]
          'mpc.script_args.dataset': [ adult, mnist_full, cifar_alexnet_3party ] #[ "adult_3p", "mnist_full_3party", "cifar_alexnet_3party", "adult_2p", "mnist_full_2party", "cifar_alexnet_2party"] # "ember_3party"
#          'mpc.domain': [ 'ring_split' ] #[ 'ring_split',  'custom_256'] # 'field_128'

        plot_cols: [ 'host_idx', 'mpc.script_name', 'network_type', 'mpc.script_args.dataset' ]
        group_cols: [ 'mpc.script_args.score_method' ] #[ 'consistency_args.type' ]
        bar_cols: [ 'mpc_type' ]

        bar_styles:

          - style: { label: ~, edgecolor: black }
            filter: { 'mpc.script_args.dataset': [ "adult" ] }

          - style: { color: "#d5e1a3", edgecolor: grey }
            filter: { "mpc_type": [ "sh" ], "$bar_part_col$": [ inference_time_s, inference_bw_bytes ] }
#
          - style: { color: "#e7eec9", edgecolor: grey }
            filter: { "mpc_type": [ "sh" ], "$bar_part_col$": [ score_time_s, score_bw_bytes ] }

          - style: { color: "#e7eec9", edgecolor: grey }
            filter: { "mpc_type": [ "sh" ], "$bar_part_col$": [ n_rounds ] }
#
          - style: { color: "#4c72b0", edgecolor: grey }
            filter: { "mpc_type": [ "mal" ], "$bar_part_col$": [ inference_time_s, inference_bw_bytes ] }

          - style: { color: "#a6b8d8", edgecolor: grey }
            filter: { "mpc_type": [ "mal" ], "$bar_part_col$": [ score_time_s, score_bw_bytes ] }

          - style: { color: "#a6b8d8", edgecolor: grey }
            filter: { "mpc_type": [ "mal" ], "$bar_part_col$": [ n_rounds ] }

          - style: { color: "red", edgecolor: grey }
            filter: { "mpc_type": [ "sh", "mal" ], "$bar_part_col$": [ score_separate_time_s ] }
          - style: { color: "green", edgecolor: grey }
            filter: { "mpc_type": [ "sh", "mal" ], "$bar_part_col$": [ sorting_time_s ] }

        legend_fig:
          format: "{}"
          cols: [ "mpc_type", "$bar_part_col$" ]
          kwargs: { loc: "upper center", ncol: 4, bbox_to_anchor: [ 0.51, 0.075 ], columnspacing: 3.5,  fancybox: True }


        title:
          format: "{}"
          plot_cols: [ "mpc.script_args.dataset" ]

        group_labels:
          cols: [ 'mpc.script_args.score_method' ]
          format: "{}"

        figure_size: [ 3.5, 2.6 ]
        bar_width: 1.0 #1.2

        labels:
          mpc_time_s: ""
          global_data_sent_bytes: ""
          auditing_overhead_s: "Overhead"
          auditing_overhead_bytes: "Overhead"
          n_rounds: ""

          ring: "Ring"
          ring_split: "Ring"
          custom_256: "Field"

          audit_sample_knnshapley: "$\\bf{KNNShapley}$"
          #audit_owner_unlearn: "Camel Unlearning"
          audit_robustness: "$\\bf{Robustness}$"

          audit_prediction_shap: "$\\bf{SHAP}$"
          audit_fairness: "$\\bf{Fairness}$"

          l2: "$\\text{L}_2$"
          cosine: "Cos"
          cosine_presort_l2: "Cos+Presort"

          adult: "Adult"
          mnist_full: "MNIST"
          cifar_alexnet: "C10"

          pc: "$\\bf{Ours}$"
          cerebro: "PED"
          sha3: "SHA3"
          sha3s: "SHA3"

          sh: "SH"
          mal: "MAL"

          score_separate_time_s: "Score computation"
          sorting_time_s: "Sorting"
          inference_time_s: "Inference"
          score_time_s: "Score"
          inference_bw_bytes: "Inference"
          score_bw_bytes: "Score"

        show_debug_info: False


        metrics:
          lan_time:
            bar_part_cols: [ inference_time_s, score_time_s ]
            y_unit_divider: 60.0 # switch to mins from secs
            y_label: "LAN Time [min]"

#            y_lim_row: [ [ 0, 1 ], [ 0, 1 ], [ 0, 4 ], [ 0, 32 ], [ 0, 32 ], [ 0, 20 ], [ 0, 320 ], [ 0, 1000 ] ]
#            n_y_ticks: 5

            plot_cols_filter:
              network_type: [ 'lan' ] # I only want lan



#          wan_time:
#            bar_part_cols: [ mpc_time_s, auditing_overhead_s ]
#            y_unit_divider: 3600.0 # switch to hours from secs
#            y_label: "WAN Time [h]"
#
#
#            n_y_ticks: 5
#            y_lim_row: [ [ 0, 2.4 ], [ 0, 2.4 ], [ 0, 4.8 ], [ 0, 40 ], [ 0, 60 ], [ 0, 40 ], [ 0, 500 ], [ 0, 1600 ] ]
#
#
#            plot_cols_filter:
#              network_type: [ 'wan' ] # I only want wan
#
#
          wan_bandwidth:
            bar_part_cols: [ inference_bw_bytes, score_bw_bytes ]
            y_label: "LAN Bandwidth [MB]"
            y_unit_multiplicator: 1.0e-6 # transform to MB

            plot_cols_filter:
              network_type: [ 'lan' ] # I only want wan
#            n_y_ticks: 5
#
#            y_lim_row: [ [ 0, 1.6 ], [ 0, 1.6 ], [ 0, 50 ], [ 0, 500 ], [ 0, 500 ], [ 0, 400 ], [ 0, 8000 ], [ 0, 20000 ] ]

          lan_rounds:
            bar_part_cols: [ n_rounds ]
            y_label: "Rounds"
            y_unit_divider: 1.0 # transform to MB

            plot_cols_filter:
              network_type: [ 'lan' ] # I only want wan

          detailed_score:
            bar_part_cols: [ score_separate_time_s, sorting_time_s ] # pre_sorting_time_s, pre_l2_time_s, post_cosine_time_s ]
            y_unit_divider: 60.0 # switch to mins from secs
            y_label: "Detailed Time [min]"

            plot_cols_filter:
              network_type: [ 'lan' ]

