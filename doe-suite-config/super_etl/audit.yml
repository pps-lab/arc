---

# TODO [nku] could add default skeleton for super etl

# Checkout the example from the demo_project: demo_project/doe-suite-config/super_etl/demo_plots.yml

$SUITE_ID$:

  audit: { audit_robustness: 1702422955, audit_sample_knnshapley: 1702422955   }

  audit_only_adult: 1702401149
  audit_only_unlearn: 1702422980

$ETL$:
  raw:
    experiments:
      audit: "*"
    extractors:
      $INCLUDE_STEPS$: [ { config: audit, pipeline: all_datasets } ]
    transformers: [ ]
    loaders:
      PickleSummaryLoader: { }
      CsvSummaryLoader: { }

  all_datasets:
    experiments:
      audit: [ audit_robustness, audit_sample_knnshapley ]
#      audit_only_adult: [ threepc ]
      audit_only_unlearn: [ audit_owner_unlearn ]

    extractors:
      MpSpdzResultExtractor: { }
      MpSpdzStderrExtractor: { }
      ConsistencyExtractor: { }
      IgnoreExtractor:
        file_regex:
          - ^stdout\.log$
    transformers:
      - name: StatTransformer
        groupby_columns: [ suite_name, run, host_idx, exp_name, 'mpc.script_name', 'mpc.protocol_setup', 'mpc.domain', 'mpc.script_args.dataset', 'mpc.script_args.round_nearest' ]
        stats:
          mpc_time_s: [ "spdz_timer_98", "spdz_timer_99", "spdz_timer_100" ]

          auditing_overhead_s: [ "consistency_convert_shares_share_switch_input_mus",
                                 "consistency_poly_eval_poly_eval_mus",
                                 "consistency_prove_verify_Prove Verify_mus" ]

          auditing_overhead_bytes: [ "consistency_convert_shares_share_switch_input_global_bytes",
                                     "consistency_poly_eval_poly_eval_global_bytes",
                                     "consistency_prove_verify_global_bytes" ]

          global_data_sent_mb: [ "spdz_global_data_sent" ]

          n_rounds: [ "spdz_player_round_number" ]

      - df.replace: { to_replace: "^adult_[a-zA-Z0-9]*", value: "adult", regex: True }
      - df.replace: { to_replace: "^mnist_full_[a-zA-Z0-9]*", value: "mnist_full", regex: True }
      - df.replace: { to_replace: "^cifar_alexnet_[a-zA-Z0-9]*", value: "cifar_alexnet", regex: True }

    loaders:
      CsvSummaryLoader: { }
      BarPlotLoader:

        cols_values_filter:
          mpc.script_name: [ 'audit_sample_knnshapley', 'audit_owner_unlearn', 'audit_prediction_shap', 'audit_fairness', 'audit_robustness' ]

          host_idx: [ 0 ] # only plot one party
          'mpc.protocol_setup': [ 'semi_honest_3', 'sy-rep-ring-party' ]
          'mpc.script_args.round_nearest': [ False ] # TODO [nku] not sure what this should be
          'mpc.script_args.dataset': [ adult, mnist_full, cifar_alexnet ] #[ "adult_3p", "mnist_full_3party", "cifar_alexnet_3party", "adult_2p", "mnist_full_2party", "cifar_alexnet_2party"] # "ember_3party"
          'mpc.domain': [ 'ring_split' ] #[ 'ring_split',  'custom_256'] # 'field_128'

        plot_cols: [ 'mpc.script_name', 'host_idx', 'mpc.domain' ]
        group_cols: [ mpc.script_args.dataset ]
        bar_cols: [ 'mpc.protocol_setup' ]

        colors:  ['#D5E1A3', '#C7B786', '#D5E1A3', '#C7B786']

        legend:
          format: "{} {}"
          cols: [ "mpc.protocol_setup", "$bar_part_col$" ]

        title:
          format: "3PC - {}"
          plot_cols: [ 'mpc.script_name' ]

        labels:
          mpc_time_s: ""
          global_data_sent_mb: ""
          auditing_overhead_s: "(Overhead)"
          auditing_overhead_bytes: "(Overhead)"
          n_rounds: ""

          ring: "Ring"
          ring_split: "Ring"
          custom_256: "Field"

          audit_sample_knnshapley: "KNNShapley"
          audit_owner_unlearn: "Camel Unlearning"
          audit_robustness: "Robustness"

          audit_prediction_shap: "KernelSHAP"
          audit_fairness: "Individual Fairness"

          adult: "Adult"
          mnist_full: "MNIST"
          cifar_alexnet: "Cifar10"

          semi_honest_3: "SH"
          sy-rep-ring-party: "MAL"

        show_debug_info: False

        metrics:
          time:
            bar_part_cols: [ mpc_time_s, auditing_overhead_s ]
            y_unit_divider: 60.0 # switch to mins from secs
            y_label: "Time [min]"
            legend_order: [ 0, 2, 1, 3 ]
            legend_ncol: 4

          rounds:
            bar_part_cols: [ n_rounds ]
            y_label: "Rounds"

          bandwidth:
            bar_part_cols: [ global_data_sent_mb, auditing_overhead_bytes ]
            y_label: "Bandwidth [MB]"
            y_unit_multiplicator: 1.0e-6 # transform to MB
            log_y: True
            legend_order: [ 0, 2, 1, 3 ]
            legend_ncol: 4

  audit_adult:
    experiments:
      audit_only_adult: [ threepc ]

    extractors:
      MpSpdzResultExtractor: { }
      MpSpdzStderrExtractor: { }
      ConsistencyExtractor: { }
      IgnoreExtractor:
        file_regex:
          - ^stdout\.log$
    transformers:
      - name: StatTransformer
        groupby_columns: [ suite_name, run, host_idx, exp_name, 'mpc.script_name', 'mpc.protocol_setup', 'mpc.domain', 'mpc.script_args.dataset', 'mpc.script_args.round_nearest' ]
        stats:
          mpc_time_s: [ "spdz_timer_98", "spdz_timer_99", "spdz_timer_100" ]

          auditing_overhead_s: [ "consistency_convert_shares_share_switch_input_mus",
                                 "consistency_poly_eval_poly_eval_mus",
                                 "consistency_prove_verify_Prove Verify_mus" ]

          auditing_overhead_bytes: [ "consistency_convert_shares_share_switch_input_global_bytes",
                                     "consistency_poly_eval_poly_eval_global_bytes",
                                     "consistency_prove_verify_global_bytes" ]

          global_data_sent_mb: [ "spdz_global_data_sent" ]

          n_rounds: [ "spdz_player_round_number" ]

      - df.replace: { to_replace: "^adult_[a-zA-Z0-9]*", value: "adult", regex: True }
      - df.replace: { to_replace: "^mnist_full_[a-zA-Z0-9]*", value: "mnist_full", regex: True }
      - df.replace: { to_replace: "^cifar_alexnet_[a-zA-Z0-9]*", value: "cifar_alexnet", regex: True }

    loaders:
      CsvSummaryLoader: { }
      BarPlotLoader:

        cols_values_filter:
          mpc.script_name: [ 'audit_prediction_shap', 'audit_fairness' ]

          host_idx: [ 0 ] # only plot one party
          'mpc.protocol_setup': [ 'semi_honest_3', 'sy-rep-ring-party' ]
          'mpc.script_args.round_nearest': [ False ] # TODO [nku] not sure what this should be
          'mpc.script_args.dataset': [ adult ] #[ "adult_3p", "mnist_full_3party", "cifar_alexnet_3party", "adult_2p", "mnist_full_2party", "cifar_alexnet_2party"] # "ember_3party"
          'mpc.domain': [ 'ring_split' ] #[ 'ring_split',  'custom_256'] # 'field_128'

        plot_cols: [ 'host_idx', 'mpc.domain' ]
        group_cols: [ 'mpc.script_name' ]
        bar_cols: [ 'mpc.protocol_setup' ]

        colors: [ '#D5E1A3', '#C7B786', '#D5E1A3', '#C7B786' ]

        legend:
          format: "{} {}"
          cols: [ "mpc.protocol_setup", "$bar_part_col$" ]

        title:
          format: "3PC - Adult"
          plot_cols: []

        bar_width: 0.8

        labels:
          mpc_time_s: ""
          global_data_sent_mb: ""
          auditing_overhead_s: "(Overhead)"
          auditing_overhead_bytes: "(Overhead)"
          n_rounds: ""

          ring: "Ring"
          ring_split: "Ring"
          custom_256: "Field"

          audit_sample_knnshapley: "KNNShapley"
          audit_owner_unlearn: "Camel Unlearning"
          audit_robustness: "Robustness"

          audit_prediction_shap: "SHAP"
          audit_fairness: "IF"

          adult: "Adult"
          mnist_full: "MNIST"
          cifar_alexnet: "Cifar10"

          semi_honest_3: "SH"
          sy-rep-ring-party: "MAL"

        show_debug_info: False

        metrics:
          time:
            bar_part_cols: [ mpc_time_s, auditing_overhead_s ]
            y_unit_divider: 60.0 # switch to mins from secs
            y_label: "Time [min]"
            legend_order: [ 0, 2, 1, 3 ]
            legend_ncol: 4

          rounds:
            bar_part_cols: [ n_rounds ]
            y_label: "Rounds"

          bandwidth:
            bar_part_cols: [ global_data_sent_mb, auditing_overhead_bytes ]
            y_label: "Bandwidth [MB]"
            y_unit_multiplicator: 1.0e-6 # transform to MB
            log_y: True
            legend_order: [ 0, 2, 1, 3 ]
            legend_ncol: 4