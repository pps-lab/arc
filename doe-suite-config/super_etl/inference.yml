---

$SUITE_ID$:

  inference_2pc: 1705775791
  inference_3pc: { sh: 1705933736, mal: 1705933736, wan_ring_field: 1705512500 }
  inference_3pc_wan: 1705947503

$ETL$:

  raw: # outputs the raw df from the extractor stage as a pickle file (can be used)
    experiments:
#      inference_2pc: "*"
      inference_3pc: "*"
    extractors:
      $INCLUDE_STEPS$: [{config: inference, pipeline: compare_domain}]
    transformers: []
    loaders:
      PickleSummaryLoader: {}

  compare_domain:

    experiments:
      inference_3pc: [ wan_ring_field ]

    extractors:
      MpSpdzResultExtractor: { }
      MpSpdzStderrExtractor:
        file_regex:
          - ^stderr\.log$
          - ^cerebro_input_stderr\.log$
          - ^cerebro_output_stderr\.log$
          - ^sha3_input_stderr\.log$
          - ^sha3_output_stderr\.log$
      ConsistencyExtractor: { }
      IgnoreExtractor:
        file_regex:
          - ^stdout\.log$
          - ^cerebro_input_stdout\.log$
          - ^cerebro_output_stdout\.log$
          - ^sha3_input_stdout\.log$
          - ^sha3_output_stdout\.log$
    transformers:
      - df.replace: { to_replace: "^adult_[a-zA-Z0-9]*", value: "adult", regex: True }
      - df.replace: { to_replace: "^mnist_full_[a-zA-Z0-9]*", value: "mnist_full", regex: True }
      - df.replace: { to_replace: "^cifar_alexnet_[a-zA-Z0-9]*", value: "cifar_alexnet", regex: True }

      - name: ComputationMultiplierTransformer
      - name: CerebroMultiplierTransformer
      - name: Sha3MultiplierTransformer

      - name: StatTransformer
        groupby_columns: [ suite_name, run, host_idx, exp_name, 'mpc.script_name', 'mpc.protocol_setup', 'mpc.domain', 'mpc.script_args.dataset', 'network_type', 'mpc_type' ]
        stats:
          mpc_time_s: [ "spdz_timer_99", "spdz_timer_101" ]

          auditing_overhead_s: [ "consistency_convert_shares_share_switch_output_mus",
                                 "consistency_poly_commit_commit_mus",
                                 "consistency_poly_commit_sign_mus",
                                 "consistency_poly_commit_sign_sk_mus",
                                 "consistency_convert_shares_share_switch_input_mus",
                                 "consistency_poly_eval_poly_eval_mus",
                                 "consistency_prove_verify_Prove Verify_mus",

                                 "spdz_timer_98",

#                                 "cerebro_input_spdz_timer_95",
#                                 "consistency_cerebro_verify_Exponentiate_mus",

            #                                 "cerebro_output_spdz_timer_95", # output timers
            #                                 "spdz_timer_97", # output timers
          ]

          auditing_overhead_bytes: [ "consistency_convert_shares_share_switch_output_global_bytes",
                                     "consistency_poly_commit_commit_global_bytes",
                                     "consistency_poly_commit_sign_global_bytes",
                                     "consistency_poly_commit_sign_sk_global_bytes",
                                     "consistency_convert_shares_share_switch_input_global_bytes",
                                     "consistency_poly_eval_poly_eval_global_bytes",
                                     "consistency_prove_verify_global_bytes",

                                     "spdz_timer_bw_98", # this is not in total!!

#                                     "cerebro_input_spdz_global_data_sent", # TODO: Also convert these
#                                     "cerebro_output_spdz_global_data_sent"
          ]

          global_data_sent_bytes: [  "spdz_timer_bw_99", "spdz_timer_bw_101" ]

          n_rounds: [ "spdz_player_round_number" ]

          share_convert_time_s: [ "consistency_convert_shares_share_switch_output_mus" ]
          share_convert_global_bytes: [ "consistency_convert_shares_share_switch_output_global_bytes" ]

          poly_commit_time_s: [ "consistency_poly_commit_commit_mus" ]
          poly_commit_global_bytes: [ "consistency_poly_commit_commit_global_bytes" ]

          sign_time_s: [ "consistency_poly_commit_sign_mus" ]
          sign_global_bytes: [ "consistency_poly_commit_sign_global_bytes" ]

          sign_sk_time_s: [ "consistency_poly_commit_sign_sk_mus" ]
          sign_sk_global_bytes: [ "consistency_poly_commit_sign_sk_global_bytes" ]

      # correct naming consistency problems
      - df.replace: { to_replace: "sy", value: { exp_name: "mal" } } # rename sy experiment to mal
      - df.replace: { to_replace: "field_256", value: "custom_256" }

      # remove num player info from datasets
      - df.replace: { to_replace: "^adult_[a-zA-Z0-9]*", value: "adult", regex: True }
      - df.replace: { to_replace: "^mnist_full_[a-zA-Z0-9]*", value: "mnist_full", regex: True }
      - df.replace: { to_replace: "^cifar_alexnet_[a-zA-Z0-9]*", value: "cifar_alexnet", regex: True }


    loaders:
      PickleSummaryLoader: { }
      CsvSummaryLoader: { }
      BarPlotLoader:

        cols_values_filter:
          mpc.script_name: [ 'inference' ]
          suite_name: [ inference_3pc ]

          host_idx: [ 0 ] # only plot one party
          mpc_type: [ 'sh', 'mal' ]
          network_type: [ 'lan', 'wan' ]
          'mpc.script_args.dataset': [ adult, mnist_full, cifar_alexnet ]
          'mpc.domain': [ 'ring_split', 'field_128',  'custom_256' ] # 'field_128'


        plot_cols: [ 'suite_name', 'mpc.script_name', 'host_idx', 'network_type', 'mpc.script_args.dataset' ] #

        group_cols: [ mpc.domain ]

        bar_cols: [ 'mpc_type' ]


        title:
          format: "{}"
          plot_cols: [ 'mpc.script_args.dataset' ]

        labels:
          mpc_time_s: ""
          auditing_overhead_s: "(Overhead)"
          auditing_overhead_bytes: "(Overhead)"
          n_rounds: ""

          ring_split: "Ring"
          field_128: "Field-S"
          custom_256: "Field-L"

          adult: "Adult"
          mnist_full: "MNIST"
          cifar_alexnet: "Cifar10"


          sh: "SH"
          mal: "MAL"


        metrics:
          time:
            bar_part_cols: [ mpc_time_s, auditing_overhead_s ]
            y_unit_multiplicator: 1 # keep seconds
            y_label: "Time [sec]"
#            y_max: 18


          rounds:
            bar_part_cols: [ n_rounds ]
            y_label: "Rounds"

          bandwidth:
            bar_part_cols: [ global_data_sent_bytes, auditing_overhead_bytes ]
            y_label: "Bandwidth [MB]"
            y_unit_multiplicator: 1.0e-6 # transform to MB
            log_y: True
            y_max: 100000
            y_ticks: [ 10, 100, 1000, 10000 ]


  compare_relatedwork:
    experiments:
      inference_3pc: [ sh, mal ]
      inference_3pc_wan: [ wan ]
#      inference_2pc: [ sh, mal ]

    extractors:
      MpSpdzResultExtractor: { }
      MpSpdzStderrExtractor:
        file_regex:
          - ^stderr\.log$
          - ^cerebro_input_stderr\.log$
          - ^cerebro_output_stderr\.log$
          - ^sha3_input_stderr\.log$
          - ^sha3_output_stderr\.log$
      ConsistencyExtractor: { }
      IgnoreExtractor:
        file_regex:
          - ^stdout\.log$
          - ^cerebro_input_stdout\.log$
          - ^cerebro_output_stdout\.log$
          - ^sha3_input_stdout\.log$
          - ^sha3_output_stdout\.log$
    transformers:
      - df.replace: { to_replace: "^adult_[a-zA-Z0-9]*", value: "adult", regex: True }
      - df.replace: { to_replace: "^mnist_full_[a-zA-Z0-9]*", value: "mnist_full", regex: True }
      - df.replace: { to_replace: "^cifar_alexnet_[a-zA-Z0-9]*", value: "cifar_alexnet", regex: True }

      - name: TimerBandwidthAggregator
      - name: ComputationMultiplierTransformer
      - name: CerebroMultiplierTransformer
      - name: Sha3MultiplierTransformer

      - name: StatTransformer
        groupby_columns: [ suite_name, run, host_idx, exp_name, 'mpc.script_name', 'mpc.protocol_setup', 'mpc.domain', 'mpc.script_args.dataset', 'network_type', 'mpc_type', 'consistency_args.type' ]
        stats:
          mpc_time_s: [ "spdz_timer_99", "spdz_timer_101" ]

          auditing_overhead_s: [ "consistency_convert_shares_share_switch_output_mus",
                                 "consistency_poly_commit_commit_mus",
                                 "consistency_poly_commit_sign_mus",
                                 "consistency_poly_commit_sign_sk_mus",
                                 "consistency_convert_shares_share_switch_input_mus",
                                 "consistency_poly_eval_poly_eval_mus",
                                 "consistency_prove_verify_Prove Verify_mus",

                                 "spdz_timer_98",
                                 "cerebro_input_spdz_timer_95",
                                 "consistency_cerebro_verify_Exponentiate_mus",

                                 "cerebro_output_spdz_timer_95", # output timers
#                                 "spdz_timer_97", # output timers

                                 "sha3_input_spdz_timer_98",
                                 "sha3_output_spdz_timer_97",

                                 "spdz_timer_97",
          ]

          auditing_overhead_bytes: [ "consistency_convert_shares_share_switch_output_global_bytes",
                                     "consistency_poly_commit_commit_global_bytes",
                                     "consistency_poly_commit_sign_global_bytes",
                                     "consistency_poly_commit_sign_sk_global_bytes",
                                     "consistency_convert_shares_share_switch_input_global_bytes",
                                     "consistency_poly_eval_poly_eval_global_bytes",
                                     "consistency_prove_verify_global_bytes",

                                     "spdz_timer_bw_98",
                                     "spdz_timer_bw_97",

                                     "cerebro_input_spdz_timer_bw_95", # output timers
                                     "cerebro_output_spdz_timer_bw_95", # output timers

                                     "sha3_input_spdz_timer_bw_98",
                                     "sha3_output_spdz_timer_bw_97",
          ]

          global_data_sent_bytes: [ "spdz_timer_bw_99", "spdz_timer_bw_101" ]

          n_rounds: [ "spdz_player_round_number" ]

          share_convert_time_s: [ "consistency_convert_shares_share_switch_output_mus" ]
          share_convert_global_bytes: [ "consistency_convert_shares_share_switch_output_global_bytes" ]

          poly_commit_time_s: [ "consistency_poly_commit_commit_mus" ]
          poly_commit_global_bytes: [ "consistency_poly_commit_commit_global_bytes" ]

          sign_time_s: [ "consistency_poly_commit_sign_mus" ]
          sign_global_bytes: [ "consistency_poly_commit_sign_global_bytes" ]

          sign_sk_time_s: [ "consistency_poly_commit_sign_sk_mus" ]
          sign_sk_global_bytes: [ "consistency_poly_commit_sign_sk_global_bytes" ]

      # correct naming consistency problems
      - df.replace: { to_replace: "sy", value: { exp_name: "mal" } } # rename sy experiment to mal
      - df.replace: { to_replace: "field_256", value: "custom_256" }


    loaders:
      PickleSummaryLoader: { }
      CsvSummaryLoader: { }
      BarPlotLoader:

        subplots: # TODO [nku]: This currently does not allow for a fully flexible alignment of subplots -> later?
          rows: ["$metrics$", "network_type"]
          cols: ["mpc.script_args.dataset"]

        cols_values_filter:
          mpc.script_name: [ 'inference' ]
          suite_name: [ inference_3pc, inference_3pc_wan, inference_2pc ]

          host_idx: [ 0 ] # only plot one party
          mpc_type: [ 'sh', 'mal' ]
          network_type: [ 'lan', 'wan' ]
          'consistency_args.type': [ 'pc', 'cerebro', 'sha3s' ]
          'mpc.script_args.dataset': [ adult, mnist_full, cifar_alexnet ]
          'mpc.domain': [ 'ring_split', 'field_128' ] # 'field_128'

        plot_cols: [ 'suite_name', 'mpc.script_name', 'host_idx', 'network_type', 'mpc.script_args.dataset' ] #

        group_cols: [ 'consistency_args.type' ]

        bar_cols: [ 'mpc_type' ]


        legend_fig:
          format: "{} {}"
          cols: [ 'mpc_type', "$bar_part_col$" ]
          kwargs: {loc: "upper center", ncol: 4, bbox_to_anchor: [0.51, 0.075], columnspacing: 3.5,  fancybox: True}


          # light-green: #e7eec9
          # dark-green: #D5E1A3
          # dark-brown: #C7B786
          # light-brown: #d7cca9
          # light-blue: #a6b8d8
          # dark-blue: #4c72b0

        bar_styles:

        - style: {label: ~, edgecolor: black}
          filter: {"consistency_args.type": ["pc"]}

        - style: {color: "#d5e1a3", edgecolor: grey}
          filter: { "mpc_type": ["sh"], "$bar_part_col$": [mpc_time_s, global_data_sent_bytes] }

        - style: {color: "#e7eec9", edgecolor: grey}
          filter: { "mpc_type": ["sh"], "$bar_part_col$": [auditing_overhead_s, auditing_overhead_bytes] }

        - style: {color: "#4c72b0", edgecolor: grey}
          filter: { "mpc_type": ["mal"], "$bar_part_col$": [mpc_time_s, global_data_sent_bytes] }

        - style: {color: "#a6b8d8", edgecolor: grey}
          filter: { "mpc_type": ["mal"], "$bar_part_col$": [auditing_overhead_s, auditing_overhead_bytes] }


        group_labels:
          cols: ['consistency_args.type']
          format: "{}"

        #legend:
        #  format: "{} {}"
        #  cols: [ "mpc_type", "$bar_part_col$" ]

        title:
          format: "{}"
          plot_cols: [ 'mpc.script_args.dataset' ]

        labels:
          mpc_time_s: ""
          global_data_sent_bytes: ""
          auditing_overhead_s: "(Overhead)"
          auditing_overhead_bytes: "(Overhead)"
          n_rounds: ""

          ring_split: "Ring"
          field_128: "Field-S"
          custom_256: "Field-L"

          adult: "Adult"
          mnist_full: "MNIST"
          cifar_alexnet: "Cifar10"

          pc: "$\\bf{Ours}$"
          cerebro: "CC"
          sha3: "SHA3"
          sha3s: "SHA3"

          sh: "SH"
          mal: "MAL"


        figure_size: [2.5, 1.8]

        show_debug_info: False
        metrics:
          lan_time:
            bar_part_cols: [ mpc_time_s, auditing_overhead_s ]
            y_unit_multiplicator: 1 # keep seconds
            y_label: "LAN Time [sec]"

            log_y: True

            y_ticks: [ 1, 10, 100, 1000 ]

            plot_cols_filter:
              network_type: [ 'lan' ] # I only want lan



          wan_time:
            bar_part_cols: [ mpc_time_s, auditing_overhead_s ]
            y_unit_multiplicator: 1 # keep seconds
            y_label: "WAN Time [sec]"
            #            y_max: 18

            log_y: True


            plot_cols_filter:
              network_type: [ 'wan' ] # I only want wan


          #rounds:
          #  bar_part_cols: [ n_rounds ]
          #  y_label: "Rounds"

          wan_bandwidth:
            bar_part_cols: [ global_data_sent_bytes, auditing_overhead_bytes ]
            y_label: "WAN Bandwidth [MB]"
            y_unit_multiplicator: 1.0e-6 # transform to MB
            log_y: True
            #y_max: 1000000
            y_ticks: [10, 100, 1000, 10000, 100000, 1000000 ]

            plot_cols_filter:
              network_type: [ 'wan' ] # I only want wan

  storage:
    experiments:
      inference_3pc: [ sh, mal ]
    #      inference_2pc: [ sh, mal ]

    extractors:
      ConstantsExtractor:
        path: storage.csv
      IgnoreExtractor:
        file_regex:
          - ^cerebro_input_stdout\.log$
          - ^cerebro_output_stdout\.log$
          - ^sha3_input_stdout\.log$
          - ^sha3_output_stdout\.log$
          - ^stderr\.log$
          - ^cerebro_input_stderr\.log$
          - ^cerebro_output_stderr\.log$
          - ^sha3_input_stderr\.log$
          - ^sha3_output_stderr\.log$
          - consistency_.*\.log$
          - ^result-P[0-9]+-[0-9]+\.txt$
    transformers: []
    loaders:
      PickleSummaryLoader: { }
      CsvSummaryLoader: { }
      BarPlotLoader:

        cols_values_filter:
          dataset: [ adult, mnist, cifar ]
          approach: [ pc_kzg, cerebro, sha3 ]
          run: [ 0 ] # this makes sure we pick one

        plot_cols: [  "run" ] #

        group_cols: [ 'approach' ]

        bar_cols: [ "dataset" ]


        #group_labels:
        #  cols: ['dataset']
        #  format: "{}"


         # light-green: #e7eec9
          # dark-green: #D5E1A3
          # dark-brown: #C7B786
          # light-brown: #d7cca9
          # light-blue: #a6b8d8
          # dark-blue: #4c72b0


        #title:
        #  format: "Receipt Storage"
        #  plot_cols: []


        figure_size: [4, 2.5]

        legend_ax:
        - format: "{}"
          cols: [ "dataset"] # , 'approach', "$bar_part_col$"
          #kwargs: {loc: "upper left", ncol: 1, bbox_to_anchor: [1, 1], columnspacing: 0.5,  fancybox: True}
          kwargs: {loc: "best"}
          filter: {}

        bar_styles:

        - style: {label: ~, edgecolor: black}
          filter: {"approach": ["pc_kzg"]}

        - style: {color: "#d5e1a3", edgecolor: "#d5e1a3"}
          filter: { "dataset": ["adult"] }

        - style: {color: "#C7B786", edgecolor: "#C7B786"}
          filter: { "dataset": ["mnist"] }

        - style: {color: "#4c72b0", edgecolor: "#4c72b0"}
          filter: { "dataset": ["cifar"] }


        labels:

          adult: "Adult"
          mnist: "MNIST"
          cifar: "Cifar10"

          pc_kzg: "$\\bf{Ours}$"
          cerebro: "CC"
          sha3: "SHA3"
          sha3s: "SHA3"


        show_debug_info: False
        bar_width: 0.6

        metrics:
          storage:
            bar_part_cols: [ trusted_setup, signature_train, signature_modelowner, identity_train, identity_modelowner,
                             commitment_train, commitment_model, commitment_prediction_x, commitment_prediction_y]

            y_unit_multiplicator: 1 # 1.0e-3 # 1.0e-6 # transform to MB
            y_label: "Storage [Bytes]"


            y_ticks: [10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 ]

            log_y: True
