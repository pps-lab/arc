---


- debug:
    msg: "-> base only"
  tags: [print_action]

- name: Add or modify nofile soft limit
  become: True
  community.general.pam_limits:
    domain: ubuntu
    limit_type: soft
    limit_item: nofile
    value: 1048576

- name: reload
  become: True
  ansible.builtin.shell:
    cmd: sysctl -p

- name: "Remove autoupdater from ubuntu"
  become: True
  ansible.builtin.apt:
    pkg:
      - unattended-upgrades
    state: absent
    update_cache: yes

- name: "Install prerequisites for MP-SPDZ"
  become: True
  ansible.builtin.apt:
    pkg:
      - automake
      - build-essential
      - clang
      - git
      - libboost-dev
      - libboost-thread-dev
      - libboost-iostreams-dev
      - libboost-filesystem-dev
      - libntl-dev
      - libgmp-dev
      - libsodium-dev
      - libssl-dev
      - libtool
      - m4
      - python3
      - texinfo
      - cmake
      - yasm
      - pkg-config
      - libomp-dev
    update_cache: yes
    state: present

#- name: "Check if MP-SPDZ is already cloned"
#  ansible.builtin.stat:
#    path: "{{git_repo_mpspdz_location}}/CONFIG"
#  register: mp_spdz_res
#
#- name: "Clone MP-SPDZ via custom repo"
#  ansible.builtin.git:
#    repo: "{{target_repo}}"
#    dest: "{{git_repo_dest}}"
#    accept_hostkey: yes
#    ssh_opts: "-o StrictHostKeyChecking=no"
#  when: mp_spdz_res.stat.exists == False

#- name: "Skip \"Clone MP-SPDZ\""
#  ansible.builtin.debug:
#    msg: "MP-SPDZ already cloned, skipping"
#  when: mp_spdz_res.stat.exists == True
#
#- name: "Check if MP-SPDZ libraries were compiled"
#  ansible.builtin.stat:
#    path: "{{git_repo_mpspdz_location}}/semi2k-party.x"
#  register: have_compiled_res
#
#- name: "Copy CONFIG (modified) file into compile dir"
#  ansible.builtin.copy:
#    src: resources/CONFIG
#    dest: "{{git_repo_mpspdz_location}}/CONFIG"
#  when: have_compiled_res.stat.exists == False

#- name: Update CONFIG to customize player-data dir
#  ansible.builtin.replace:
#    path: "{{ mpspdz_dir }}/CONFIG"
#    regexp: '-DPREP_DIR="Player-Data\/"'
#    replace: '-DPREP_DIR="Player-Prep-Data/"'
#- name: Update CONFIG to customize player-ssl dir
#  ansible.builtin.replace:
#    path: "{{ mpspdz_dir }}/CONFIG"
#    regexp: '-DSSL_DIR="Player-Data\/"'
#    replace: '-DSSL_DIR="Player-SSL-Data/"'

# TODO: Look into this Player-Prep-Data dir ??
- name: Update CONFIG to customize player-data dir
  ansible.builtin.replace:
    path: "{{ mpspdz_dir }}/CONFIG"
    regexp: '-DPREP_DIR="Player-Prep-Data\/"'
    replace: '-DPREP_DIR="Player-Data/"'

- name: Remove old CONFIG.mine
  ansible.builtin.file:
    path: "{{ mpspdz_dir }}/CONFIG.mine"
    state: absent

- name: "Create Player-Data/ folder"
  ansible.builtin.file:
    path: "{{ mpspdz_dir }}/Player-Data"
    state: directory

#- name: "Create Player-SSL-Data/ folder"
#  ansible.builtin.file:
#    path: "{{ mpspdz_dir }}/Player-SSL-Data"
#    state: directory

- name: "Create Player-Prep-Data/ folder"
  ansible.builtin.file:
    path: "{{ mpspdz_dir }}/Player-Prep-Data"
    state: directory

- name: "Check if MP-SPDZ is compiled"
  ansible.builtin.stat:
    path: "{{ mpspdz_dir }}/semi2k-party.x"
  register: mpspdz_compiled
- name: "Compile MP-SPDZ (if some files dont exist)"
#  when: mpspdz_compiled.stat.exists == False
  block:
    - name: "Make cmake 3.15" # TODO: Is this necessary?
      community.general.make:
        chdir: "{{ mpspdz_dir }}"
        jobs: "8"
        target: "cmake"

    - name: Manually download boost (old link is broken from libOTe)
      ansible.builtin.get_url:
        url: https://archives.boost.io/release/1.83.0/source/boost_1_83_0.tar.bz2
        dest: "{{ mpspdz_dir }}/deps/libOTe/cryptoTools/thirdparty/boost_1_83_0.tar.bz2"
#        force: true

    - name: "Make boost 1.81"
      community.general.make:
        chdir: "{{ mpspdz_dir }}"
        jobs: "36"
        target: "boost"
#    # SOMEHOW THIS LIBOTE IS FAILING??
#    - name: "Compile libote"
#      community.general.make:
#        chdir: "{{ mpspdz_dir }}"
#        jobs: "36"
#        target: "libote"
    - name: "Compile MP-SPDZ tldr to get all libraries"
      community.general.make:
        chdir: "{{ mpspdz_dir }}"
        jobs: "36"
        target: "tldr"
    - name: "Install libff"
      community.general.make:
        chdir: "{{ mpspdz_dir }}"
        jobs: "36"
        target: "libff"
    #  when: have_compiled_res.stat.exists == False

    - name: "Compile MP-SPDZ all"
      community.general.make:
        chdir: "{{ mpspdz_dir }}"
        jobs: "36"
        target: "all"
    #  when: have_compiled_res.stat.exists == False

#- name: "Create Player-Data Folder"
#  ansible.builtin.file:
#    path: "{{git_repo_mpspdz_location}}/Player-Data"
#    state: directory
#- name: "Create Player-SSL-Data/ folder"
#  ansible.builtin.file:
#    path: "{{git_repo_mpspdz_location}}/Player-SSL-Data"
#    state: directory
#
#- name: "Create Player-Prep-Data/ folder"
#  ansible.builtin.file:
#    path: "{{git_repo_mpspdz_location}}/Player-Prep-Data"
#    state: directory

- name: "Ensure Player-SSL-Data exists"
  ansible.builtin.file:
    state: directory
    path: "{{ mpspdz_dir }}/Player-SSL-Data"

- name: "Check if SSL certificates are up to date (note: this checks validity on coordinator machine)"
  delegate_to: localhost
  openssl_certificate_info:
    path: "{{ does_project_dir }}/MP-SPDZ/Player-SSL-Data/P0.pem"
    # for valid_at, invalid_at and valid_in
    valid_at:
      one_day: "+1d"
  register: result
  when: lookup( 'file', does_project_dir + '/MP-SPDZ/Player-SSL-Data/P0.pem', errors='ignore' )

- name: Generate SSL Certificates for 20 players locally if not exist yet # TODO: Does this expire? does this work in parallel?
  delegate_to: localhost
  when: ('skipped' in result and result.skipped) or result.valid_at.one_day == False
  ansible.builtin.shell:
    chdir: "{{ does_project_dir }}"
    cmd: "bash {{ does_project_dir }}/MP-SPDZ/Scripts/setup-ssl.sh 20 MP-SPDZ/Player-SSL-Data/"

- name: Copy SSL Certificates
  ansible.builtin.copy:
    src: "{{ does_project_dir }}/MP-SPDZ/Player-SSL-Data/"
    dest: "{{ mpspdz_dir }}/Player-Data/"

# For some reason the above copy command gives checksum errors in some cases
#- name: Copy SSL Certificates with rsync
#  ansible.posix.synchronize:
#    src: "{{ does_project_dir }}/MP-SPDZ/Player-SSL-Data/"
#    dest: "{{ mpspdz_dir }}/Player-SSL-Data/"

#- name: Copy SSL Certificates
#  ansible.builtin.copy:
#    src: "{{ mpspdz_dir }}/Player-SSL-Data/"
#    dest: "{{ mpspdz_dir }}/Player-Data/"
#    remote_src: yes

## MP_SPDZ SETUP AT THIS POINT!
- name: "Check if AWS CLI is installed"
  ansible.builtin.stat:
    path: "/usr/local/bin/aws"
  register: aws_cli_stat
- name: Setup awscli
  when: aws_cli_stat.stat.exists == False
  block:
    - name: Install packages
      become: True
      apt:
        pkg:
          - zip
        update_cache: yes

    - name: Download awscli
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Unpack awscli
      ansible.builtin.unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes

    - name: Install awscli via shell
      become: True
      ansible.builtin.shell:
        chdir: /tmp
        cmd: ./aws/install
        creates: /usr/local/bin/aws

- name: Setup Input Folder
  ansible.builtin.file:
    path: "{{ dataset_dir }}"
    state: directory

#- name: Make ml-example script executable
#  ansible.builtin.file:
#    path: "{{ exp_code_dir }}/utils/toy-example.sh"
#    mode: "777"
#    state: file

### SETTING UP POETRY
- name: "Check if poetry is installed"
  ansible.builtin.stat:
    path: "/home/ubuntu/.local/bin/poetry"
  register: poetry_stat

- name: Install Poetry
  when: poetry_stat.stat.exists == False
  block:
#    - name: Update repositories cache and install required packages
#      become: True
#      apt:
#        pkg:
#          - python3.9
#          - python3.9-venv
#        update_cache: yes

    - name: Download get-pip.py
      ansible.builtin.get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /tmp/get-pip.py

    - name: Install pip for python (via script)
      ansible.builtin.shell:
        cmd: python3 /tmp/get-pip.py

    - name: Download install-poetry.py
      ansible.builtin.get_url:
        url: https://install.python-poetry.org/install-poetry.py
        dest: /tmp/install-poetry.py

    - name: Install poetry with script install-poetry.py
      ansible.builtin.shell:
        cmd: python3 /tmp/install-poetry.py

- name: make path to poetry available in variable
  set_fact:
    poetry: /home/ubuntu/.local/bin/poetry

- name: Set config to create .venv folder in project directory
  ansible.builtin.shell:
    cmd: "{{ poetry }} config virtualenvs.in-project true"

- name: Install poetry project if project exists
  ansible.builtin.shell:
    cmd: "{{poetry}} install"
    chdir: "{{ exp_code_dir }}"

- name: Make symbolic link from exp_code_dir/script_utils to Compiler folder of MP-SPDZ
  ansible.builtin.file:
    state: link
    path: "{{ mpspdz_dir }}/Compiler/script_utils"
    src: "{{ exp_code_dir }}/script_utils"
